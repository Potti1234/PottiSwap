/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Whitelist","structs":{},"methods":[{"name":"createWhitelist","args":[{"type":"uint64","name":"factoryAppId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addToWhitelist","args":[{"type":"uint64","name":"appId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"removeFromWhitelist","args":[{"type":"uint64","name":"appId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"isWhitelisted","args":[{"type":"uint64","name":"appId"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"factoryAppId":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmFjdG9yeUFwcElk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"whitelist":{"keyType":"uint64","valueType":"uint64","prefix":"d2hpdGVsaXN0"}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[181],"errorMessage":"Not authorized to add to whitelist"},{"pc":[202],"errorMessage":"Not authorized to remove from whitelist"},{"pc":[75,107,123,139],"errorMessage":"OnCompletion is not NoOp"},{"pc":[160],"errorMessage":"can only call when creating"},{"pc":[78,110,126,142],"errorMessage":"can only call when not creating"},{"pc":[177,198],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAgxmYWN0b3J5QXBwSWQJd2hpdGVsaXN0MRtBAHWCBAQ2Ywo1BHfzoLYEKIgznQT/a+vjNhoAjgQAQgAyACIAAiNDMRkURDEYRDYaAReIAH6AAQAjTwJUgAQVH3x1TFCwIkMxGRREMRhENhoBF4gASiJDMRkURDEYRDYaAReIACUiQzEZFEQxGEQ2GgEXiAANIkMxGUD/qTEYFEQiQ4oBACiL/2eJigEAIyhlRDEYEkSL/xYpTFAiFr+JigEAIyhlRDEYEkSL/xYpTFC8SImKAQGL/xYpTFC9RQGJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Whitelist contract
 */
export type WhitelistArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createWhitelist(uint64)void': {
      factoryAppId: bigint | number
    }
    'addToWhitelist(uint64)void': {
      appId: bigint | number
    }
    'removeFromWhitelist(uint64)void': {
      appId: bigint | number
    }
    'isWhitelisted(uint64)bool': {
      appId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createWhitelist(uint64)void': [factoryAppId: bigint | number]
    'addToWhitelist(uint64)void': [appId: bigint | number]
    'removeFromWhitelist(uint64)void': [appId: bigint | number]
    'isWhitelisted(uint64)bool': [appId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type WhitelistReturns = {
  'createWhitelist(uint64)void': void
  'addToWhitelist(uint64)void': void
  'removeFromWhitelist(uint64)void': void
  'isWhitelisted(uint64)bool': boolean
}

/**
 * Defines the types of available calls and state of the Whitelist smart contract.
 */
export type WhitelistTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createWhitelist(uint64)void' | 'createWhitelist', {
      argsObj: WhitelistArgs['obj']['createWhitelist(uint64)void']
      argsTuple: WhitelistArgs['tuple']['createWhitelist(uint64)void']
      returns: WhitelistReturns['createWhitelist(uint64)void']
    }>
    & Record<'addToWhitelist(uint64)void' | 'addToWhitelist', {
      argsObj: WhitelistArgs['obj']['addToWhitelist(uint64)void']
      argsTuple: WhitelistArgs['tuple']['addToWhitelist(uint64)void']
      returns: WhitelistReturns['addToWhitelist(uint64)void']
    }>
    & Record<'removeFromWhitelist(uint64)void' | 'removeFromWhitelist', {
      argsObj: WhitelistArgs['obj']['removeFromWhitelist(uint64)void']
      argsTuple: WhitelistArgs['tuple']['removeFromWhitelist(uint64)void']
      returns: WhitelistReturns['removeFromWhitelist(uint64)void']
    }>
    & Record<'isWhitelisted(uint64)bool' | 'isWhitelisted', {
      argsObj: WhitelistArgs['obj']['isWhitelisted(uint64)bool']
      argsTuple: WhitelistArgs['tuple']['isWhitelisted(uint64)bool']
      returns: WhitelistReturns['isWhitelisted(uint64)bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        factoryAppId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        whitelist: Map<bigint | number, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WhitelistSignatures = keyof WhitelistTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WhitelistNonVoidMethodSignatures = keyof WhitelistTypes['methods'] extends infer T ? T extends keyof WhitelistTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Whitelist smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WhitelistSignatures> = WhitelistTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Whitelist smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WhitelistSignatures> = WhitelistTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WhitelistTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WhitelistTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WhitelistCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WhitelistDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WhitelistCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Whitelist smart contract
 */
export abstract class WhitelistParamsFactory {
  /**
   * Constructs a no op call for the createWhitelist(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createWhitelist(params: CallParams<WhitelistArgs['obj']['createWhitelist(uint64)void'] | WhitelistArgs['tuple']['createWhitelist(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createWhitelist(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.factoryAppId],
    }
  }
  /**
   * Constructs a no op call for the addToWhitelist(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addToWhitelist(params: CallParams<WhitelistArgs['obj']['addToWhitelist(uint64)void'] | WhitelistArgs['tuple']['addToWhitelist(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addToWhitelist(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
  /**
   * Constructs a no op call for the removeFromWhitelist(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeFromWhitelist(params: CallParams<WhitelistArgs['obj']['removeFromWhitelist(uint64)void'] | WhitelistArgs['tuple']['removeFromWhitelist(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeFromWhitelist(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
  /**
   * Constructs a no op call for the isWhitelisted(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isWhitelisted(params: CallParams<WhitelistArgs['obj']['isWhitelisted(uint64)bool'] | WhitelistArgs['tuple']['isWhitelisted(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isWhitelisted(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Whitelist smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WhitelistFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WhitelistFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WhitelistClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WhitelistClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Whitelist smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WhitelistDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new WhitelistClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Whitelist smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Whitelist smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Whitelist smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new WhitelistClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Whitelist smart contract
 */
export class WhitelistClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WhitelistClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Whitelist app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WhitelistClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WhitelistNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WhitelistClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WhitelistClient> {
    return new WhitelistClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WhitelistClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WhitelistClient> {
    return new WhitelistClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Whitelist smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Whitelist smart contract using the `createWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createWhitelist: (params: CallParams<WhitelistArgs['obj']['createWhitelist(uint64)void'] | WhitelistArgs['tuple']['createWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WhitelistParamsFactory.createWhitelist(params))
    },

    /**
     * Makes a call to the Whitelist smart contract using the `addToWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addToWhitelist: (params: CallParams<WhitelistArgs['obj']['addToWhitelist(uint64)void'] | WhitelistArgs['tuple']['addToWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WhitelistParamsFactory.addToWhitelist(params))
    },

    /**
     * Makes a call to the Whitelist smart contract using the `removeFromWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeFromWhitelist: (params: CallParams<WhitelistArgs['obj']['removeFromWhitelist(uint64)void'] | WhitelistArgs['tuple']['removeFromWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WhitelistParamsFactory.removeFromWhitelist(params))
    },

    /**
     * Makes a call to the Whitelist smart contract using the `isWhitelisted(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isWhitelisted: (params: CallParams<WhitelistArgs['obj']['isWhitelisted(uint64)bool'] | WhitelistArgs['tuple']['isWhitelisted(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WhitelistParamsFactory.isWhitelisted(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Whitelist smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Whitelist smart contract using the `createWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createWhitelist: (params: CallParams<WhitelistArgs['obj']['createWhitelist(uint64)void'] | WhitelistArgs['tuple']['createWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WhitelistParamsFactory.createWhitelist(params))
    },

    /**
     * Makes a call to the Whitelist smart contract using the `addToWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addToWhitelist: (params: CallParams<WhitelistArgs['obj']['addToWhitelist(uint64)void'] | WhitelistArgs['tuple']['addToWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WhitelistParamsFactory.addToWhitelist(params))
    },

    /**
     * Makes a call to the Whitelist smart contract using the `removeFromWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeFromWhitelist: (params: CallParams<WhitelistArgs['obj']['removeFromWhitelist(uint64)void'] | WhitelistArgs['tuple']['removeFromWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WhitelistParamsFactory.removeFromWhitelist(params))
    },

    /**
     * Makes a call to the Whitelist smart contract using the `isWhitelisted(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isWhitelisted: (params: CallParams<WhitelistArgs['obj']['isWhitelisted(uint64)bool'] | WhitelistArgs['tuple']['isWhitelisted(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WhitelistParamsFactory.isWhitelisted(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Whitelist smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Whitelist smart contract using the `createWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createWhitelist: async (params: CallParams<WhitelistArgs['obj']['createWhitelist(uint64)void'] | WhitelistArgs['tuple']['createWhitelist(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WhitelistParamsFactory.createWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | WhitelistReturns['createWhitelist(uint64)void'])}
    },

    /**
     * Makes a call to the Whitelist smart contract using the `addToWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addToWhitelist: async (params: CallParams<WhitelistArgs['obj']['addToWhitelist(uint64)void'] | WhitelistArgs['tuple']['addToWhitelist(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WhitelistParamsFactory.addToWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | WhitelistReturns['addToWhitelist(uint64)void'])}
    },

    /**
     * Makes a call to the Whitelist smart contract using the `removeFromWhitelist(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeFromWhitelist: async (params: CallParams<WhitelistArgs['obj']['removeFromWhitelist(uint64)void'] | WhitelistArgs['tuple']['removeFromWhitelist(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WhitelistParamsFactory.removeFromWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | WhitelistReturns['removeFromWhitelist(uint64)void'])}
    },

    /**
     * Makes a call to the Whitelist smart contract using the `isWhitelisted(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isWhitelisted: async (params: CallParams<WhitelistArgs['obj']['isWhitelisted(uint64)bool'] | WhitelistArgs['tuple']['isWhitelisted(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WhitelistParamsFactory.isWhitelisted(params))
      return {...result, return: result.return as unknown as (undefined | WhitelistReturns['isWhitelisted(uint64)bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WhitelistClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Whitelist smart contract using the `isWhitelisted(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isWhitelisted(params: CallParams<WhitelistArgs['obj']['isWhitelisted(uint64)bool'] | WhitelistArgs['tuple']['isWhitelisted(uint64)bool']>) {
    const result = await this.appClient.send.call(WhitelistParamsFactory.isWhitelisted(params))
    return result.return as unknown as WhitelistReturns['isWhitelisted(uint64)bool']
  }

  /**
   * Methods to access state for the current Whitelist app
   */
  state = {
    /**
     * Methods to access global state for the current Whitelist app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          factoryAppId: result.factoryAppId,
        }
      },
      /**
       * Get the current value of the factoryAppId key in global state
       */
      factoryAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("factoryAppId")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Whitelist app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the whitelist map in box state
       */
      whitelist: {
        /**
         * Get all current values of the whitelist map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("whitelist")) as Map<bigint, bigint> },
        /**
         * Get a current value of the whitelist map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("whitelist", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): WhitelistComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createWhitelist(uint64)void method call against the Whitelist contract
       */
      createWhitelist(params: CallParams<WhitelistArgs['obj']['createWhitelist(uint64)void'] | WhitelistArgs['tuple']['createWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createWhitelist(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addToWhitelist(uint64)void method call against the Whitelist contract
       */
      addToWhitelist(params: CallParams<WhitelistArgs['obj']['addToWhitelist(uint64)void'] | WhitelistArgs['tuple']['addToWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addToWhitelist(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeFromWhitelist(uint64)void method call against the Whitelist contract
       */
      removeFromWhitelist(params: CallParams<WhitelistArgs['obj']['removeFromWhitelist(uint64)void'] | WhitelistArgs['tuple']['removeFromWhitelist(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeFromWhitelist(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a isWhitelisted(uint64)bool method call against the Whitelist contract
       */
      isWhitelisted(params: CallParams<WhitelistArgs['obj']['isWhitelisted(uint64)bool'] | WhitelistArgs['tuple']['isWhitelisted(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isWhitelisted(params)))
        resultMappers.push((v) => client.decodeReturnValue('isWhitelisted(uint64)bool', v))
        return this
      },
      /**
       * Add a clear state call to the Whitelist contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WhitelistComposer
  }
}
export type WhitelistComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createWhitelist(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createWhitelist(params?: CallParams<WhitelistArgs['obj']['createWhitelist(uint64)void'] | WhitelistArgs['tuple']['createWhitelist(uint64)void']>): WhitelistComposer<[...TReturns, WhitelistReturns['createWhitelist(uint64)void'] | undefined]>

  /**
   * Calls the addToWhitelist(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addToWhitelist(params?: CallParams<WhitelistArgs['obj']['addToWhitelist(uint64)void'] | WhitelistArgs['tuple']['addToWhitelist(uint64)void']>): WhitelistComposer<[...TReturns, WhitelistReturns['addToWhitelist(uint64)void'] | undefined]>

  /**
   * Calls the removeFromWhitelist(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeFromWhitelist(params?: CallParams<WhitelistArgs['obj']['removeFromWhitelist(uint64)void'] | WhitelistArgs['tuple']['removeFromWhitelist(uint64)void']>): WhitelistComposer<[...TReturns, WhitelistReturns['removeFromWhitelist(uint64)void'] | undefined]>

  /**
   * Calls the isWhitelisted(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isWhitelisted(params?: CallParams<WhitelistArgs['obj']['isWhitelisted(uint64)bool'] | WhitelistArgs['tuple']['isWhitelisted(uint64)bool']>): WhitelistComposer<[...TReturns, WhitelistReturns['isWhitelisted(uint64)bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Whitelist smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WhitelistComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WhitelistComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WhitelistComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WhitelistComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WhitelistComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WhitelistComposerResults<TReturns>>
}
export type WhitelistComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

