#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 6
    bytecblock "factoryAppId"
    // smart_contracts/htlc/resolver.algo.ts:17
    // export class Resolver extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x1683a4fc 0xc82f6203 0xac5cd178 // method "createResolver(uint64)void", method "deployEscrow(pay,uint64,byte[32],address)uint64", method "claimEscrow(byte[32])void"
    txna ApplicationArgs 0
    match main_createResolver_route@3 main_deployEscrow_route@4 main_claimEscrow_route@5

main_after_if_else@12:
    // smart_contracts/htlc/resolver.algo.ts:17
    // export class Resolver extends Contract {
    intc_1 // 0
    return

main_claimEscrow_route@5:
    // smart_contracts/htlc/resolver.algo.ts:44
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/resolver.algo.ts:17
    // export class Resolver extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/htlc/resolver.algo.ts:44
    // @arc4.abimethod()
    callsub claimEscrow
    intc_0 // 1
    return

main_deployEscrow_route@4:
    // smart_contracts/htlc/resolver.algo.ts:30
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/resolver.algo.ts:17
    // export class Resolver extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/htlc/resolver.algo.ts:30
    // @arc4.abimethod()
    callsub deployEscrow
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_createResolver_route@3:
    // smart_contracts/htlc/resolver.algo.ts:25
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/resolver.algo.ts:17
    // export class Resolver extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/htlc/resolver.algo.ts:25
    // @arc4.abimethod()
    callsub createResolver
    intc_0 // 1
    return

main_bare_routing@8:
    // smart_contracts/htlc/resolver.algo.ts:17
    // export class Resolver extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/htlc/resolver.algo.ts::Resolver.createResolver(factoryAppId: uint64) -> void:
createResolver:
    // smart_contracts/htlc/resolver.algo.ts:25-26
    // @arc4.abimethod()
    // public createResolver(factoryAppId: uint64): void {
    proto 1 0
    // smart_contracts/htlc/resolver.algo.ts:18
    // public factoryAppId = GlobalState<uint64>();
    bytec_0 // "factoryAppId"
    // smart_contracts/htlc/resolver.algo.ts:27
    // this.factoryAppId.value = factoryAppId;
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/htlc/resolver.algo.ts::Resolver.deployEscrow(txnDeposit: uint64, timelock: uint64, secretHash: bytes, taker: bytes) -> uint64:
deployEscrow:
    // smart_contracts/htlc/resolver.algo.ts:30-31
    // @arc4.abimethod()
    // public deployEscrow(txnDeposit: gtxn.PaymentTxn, timelock: uint64, secretHash: arc4.StaticBytes<32>, taker: Address): uint64 {
    proto 4 1
    // smart_contracts/htlc/resolver.algo.ts:18
    // public factoryAppId = GlobalState<uint64>();
    intc_1 // 0
    bytec_0 // "factoryAppId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/resolver.algo.ts:33-39
    // const escrowAppId = itxn
    //   .applicationCall({
    //     appId: factoryAppId,
    //     appArgs: [timelock, secretHash, taker],
    //     fee: Global.minTxnFee,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/htlc/resolver.algo.ts:37
    // fee: Global.minTxnFee,
    global MinTxnFee
    // smart_contracts/htlc/resolver.algo.ts:36
    // appArgs: [timelock, secretHash, taker],
    frame_dig -3
    itob
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationID
    // smart_contracts/htlc/resolver.algo.ts:33-38
    // const escrowAppId = itxn
    //   .applicationCall({
    //     appId: factoryAppId,
    //     appArgs: [timelock, secretHash, taker],
    //     fee: Global.minTxnFee,
    //   })
    intc_2 // 6
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/htlc/resolver.algo.ts:33-39
    // const escrowAppId = itxn
    //   .applicationCall({
    //     appId: factoryAppId,
    //     appArgs: [timelock, secretHash, taker],
    //     fee: Global.minTxnFee,
    //   })
    //   .submit();
    itxn_submit
    itxn ApplicationID
    // smart_contracts/htlc/resolver.algo.ts:41
    // return escrowAppId.appId.id;
    retsub


// smart_contracts/htlc/resolver.algo.ts::Resolver.claimEscrow(secret: bytes) -> void:
claimEscrow:
    // smart_contracts/htlc/resolver.algo.ts:44-45
    // @arc4.abimethod()
    // public claimEscrow(secret: arc4.StaticBytes<32>): void {
    proto 1 0
    // smart_contracts/htlc/resolver.algo.ts:18
    // public factoryAppId = GlobalState<uint64>();
    intc_1 // 0
    bytec_0 // "factoryAppId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/resolver.algo.ts:48-54
    // itxn
    //   .applicationCall({
    //     appId: factoryAppId,
    //     appArgs: [secret],
    //     fee: Global.minTxnFee,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/htlc/resolver.algo.ts:52
    // fee: Global.minTxnFee,
    global MinTxnFee
    frame_dig -1
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationID
    // smart_contracts/htlc/resolver.algo.ts:48-53
    // itxn
    //   .applicationCall({
    //     appId: factoryAppId,
    //     appArgs: [secret],
    //     fee: Global.minTxnFee,
    //   })
    intc_2 // 6
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/htlc/resolver.algo.ts:48-54
    // itxn
    //   .applicationCall({
    //     appId: factoryAppId,
    //     appArgs: [secret],
    //     fee: Global.minTxnFee,
    //   })
    //   .submit();
    itxn_submit
    retsub
