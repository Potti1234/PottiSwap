{
  "version": 3,
  "sources": [
    "/home/lukas/CodingProjects/PottiSwap/algorandContracts/projects/algorandContracts/smart_contracts/htlc/auction.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCS;AAA6D;AAApE;AAFF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AA2EG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AArDH;;;AAAA;AAqDG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA3CH;;;AAAA;AA2CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAfH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAeG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAeE;;;AAEE;;AAAA;AACA;;AAAA;AACA;;AAAA;AACW;;AAAkB;;AAAtB;AAAP;AAGY;;AAAA;AACG;;AAAA;AAtBV;AAAA;AAAA;AAAA;AAuBQ;AACC;;AAAA;AACF;;AAAA;AACA;;AAAA;AACe;;AACF;AACA;;;AAAZ;AATc;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUnB;AAVmB;AAWd;AAXc;AApBtB;AAAA;AAAA;AAAA;AAkCL;AAnCqE;AAAA;AAAA;AAmCrE;AAAA;AAlCK;AAAA;AAAA;AAAA;AAoCL;AAAA;AApCK;AAoCL;AAAA;AApCK;AAAA;AAAA;AAAA;AAsCsC;AAApC;AAAP;AAGF;;;AAE0B;;AAAA;AA5C6C;AAAA;AAAA;AA4CZ;AAAA;AAC7B;;;AAAmD;;AAAV;;AAAU;AAAnD;AAEC;;AAAX;;AAAW;AACmC;;AAAT;;AAAS;AAA7D;;AAAA;AAAA;AAA+G;;AAAT;;AAAS;AAAvC;;AAAA;AAAA;AAAzE;AADA;AAEF;AAGF;;;AAQ0B;;AAAA;AA5D6C;AAAA;AAAA;AA4DZ;AAAA;AAAA;AACnD;;AAAe;;;AAEmB;;AAAxC;;AAAA;AAAA;;AACuB;;;;;;;;;;AAAvB;;AAC4B;AAAA;AAA5B;;AACA;;AAUc;;AAAd",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"auctionInstancesAmount\" 0x151f7c75 \"auctionInstances\" 0x0000000000000000"
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "66": {
      "op": "bytec_0 // \"auctionInstancesAmount\"",
      "defined_out": [
        "\"auctionInstancesAmount\""
      ],
      "stack_out": [
        "\"auctionInstancesAmount\""
      ]
    },
    "67": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"auctionInstancesAmount\"",
        "0"
      ],
      "stack_out": [
        "\"auctionInstancesAmount\"",
        "0"
      ]
    },
    "68": {
      "op": "app_global_put",
      "stack_out": []
    },
    "69": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "71": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "74": {
      "op": "pushbytess 0x895650a3 0x19503819 0xeddfe598 0x64ccd930 // method \"createAuction(uint64,uint64,uint64,uint64,uint64)uint64\", method \"getCurrentPrice(uint64)uint64\", method \"bid(uint64)void\", method \"latestTimestamp()uint64\"",
      "defined_out": [
        "Method(bid(uint64)void)",
        "Method(createAuction(uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(getCurrentPrice(uint64)uint64)",
        "Method(latestTimestamp()uint64)"
      ],
      "stack_out": [
        "Method(createAuction(uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(getCurrentPrice(uint64)uint64)",
        "Method(bid(uint64)void)",
        "Method(latestTimestamp()uint64)"
      ]
    },
    "96": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bid(uint64)void)",
        "Method(createAuction(uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(getCurrentPrice(uint64)uint64)",
        "Method(latestTimestamp()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createAuction(uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(getCurrentPrice(uint64)uint64)",
        "Method(bid(uint64)void)",
        "Method(latestTimestamp()uint64)",
        "tmp%2#0"
      ]
    },
    "99": {
      "op": "match main_createAuction_route@5 main_getCurrentPrice_route@6 main_bid_route@7 main_latestTimestamp_route@8",
      "stack_out": []
    },
    "109": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "110": {
      "op": "return",
      "stack_out": []
    },
    "111": {
      "block": "main_latestTimestamp_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "113": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "114": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "115": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "117": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "118": {
      "callsub": "smart_contracts/htlc/auction.algo.ts::Auction.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "121": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "122": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "123": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "124": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "125": {
      "op": "log",
      "stack_out": []
    },
    "126": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "block": "main_bid_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "130": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "131": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "132": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "134": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "135": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "138": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "139": {
      "callsub": "smart_contracts/htlc/auction.algo.ts::Auction.bid",
      "op": "callsub bid",
      "stack_out": []
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "return",
      "stack_out": []
    },
    "144": {
      "block": "main_getCurrentPrice_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "146": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "147": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "150": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "151": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "154": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "155": {
      "callsub": "smart_contracts/htlc/auction.algo.ts::Auction.getCurrentPrice",
      "op": "callsub getCurrentPrice",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "158": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "159": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "162": {
      "op": "log",
      "stack_out": []
    },
    "163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "164": {
      "op": "return",
      "stack_out": []
    },
    "165": {
      "block": "main_createAuction_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "167": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "168": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "169": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "171": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "172": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "175": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "176": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "179": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "180": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "183": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "184": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "187": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "188": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "191": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "192": {
      "callsub": "smart_contracts/htlc/auction.algo.ts::Auction.createAuction",
      "op": "callsub createAuction",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "195": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "196": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "197": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "199": {
      "op": "log",
      "stack_out": []
    },
    "200": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "201": {
      "op": "return",
      "stack_out": []
    },
    "202": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "204": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "207": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "209": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "210": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "211": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "212": {
      "op": "return",
      "stack_out": []
    },
    "213": {
      "subroutine": "smart_contracts/htlc/auction.algo.ts::Auction.createAuction",
      "params": {
        "startPrice#0": "uint64",
        "minPrice#0": "uint64",
        "duration#0": "uint64",
        "escrowId#0": "uint64",
        "escrowAppId#0": "uint64"
      },
      "block": "createAuction",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "216": {
      "op": "frame_dig -5",
      "defined_out": [
        "startPrice#0 (copy)"
      ],
      "stack_out": [
        "startPrice#0 (copy)"
      ]
    },
    "218": {
      "error": "Start price must be positive",
      "op": "assert // Start price must be positive",
      "stack_out": []
    },
    "219": {
      "op": "frame_dig -4",
      "defined_out": [
        "minPrice#0 (copy)"
      ],
      "stack_out": [
        "minPrice#0 (copy)"
      ]
    },
    "221": {
      "error": "Min price must be positive",
      "op": "assert // Min price must be positive",
      "stack_out": []
    },
    "222": {
      "op": "frame_dig -3",
      "defined_out": [
        "duration#0 (copy)"
      ],
      "stack_out": [
        "duration#0 (copy)"
      ]
    },
    "224": {
      "error": "Duration must be positive",
      "op": "assert // Duration must be positive",
      "stack_out": []
    },
    "225": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "227": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "229": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "230": {
      "error": "Only the Relayer can create an auction",
      "op": "assert // Only the Relayer can create an auction",
      "stack_out": []
    },
    "231": {
      "op": "frame_dig -2",
      "defined_out": [
        "escrowId#0 (copy)"
      ],
      "stack_out": [
        "escrowId#0 (copy)"
      ]
    },
    "233": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "234": {
      "op": "frame_dig -1",
      "defined_out": [
        "escrowAppId#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "escrowAppId#0 (copy)"
      ]
    },
    "236": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "237": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "238": {
      "op": "bytec_0 // \"auctionInstancesAmount\"",
      "defined_out": [
        "\"auctionInstancesAmount\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"auctionInstancesAmount\""
      ]
    },
    "239": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "240": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0"
      ]
    },
    "241": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "242": {
      "op": "frame_dig -5",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "startPrice#0 (copy)"
      ]
    },
    "244": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "245": {
      "op": "frame_dig -4",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "minPrice#0 (copy)"
      ]
    },
    "247": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "248": {
      "op": "frame_dig -3",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "duration#0 (copy)"
      ]
    },
    "250": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "251": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0"
      ]
    },
    "253": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "254": {
      "callsub": "smart_contracts/htlc/auction.algo.ts::Auction.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%0#0"
      ]
    },
    "257": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0"
      ]
    },
    "258": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "260": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "262": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "263": {
      "op": "uncover 7",
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "266": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "269": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%4#0"
      ]
    },
    "271": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "272": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%5#0"
      ]
    },
    "274": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "275": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ]
    },
    "277": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "278": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%7#0",
        "tmp%7#0"
      ]
    },
    "280": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "281": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%6#0"
      ]
    },
    "282": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "283": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "0x0000000000000000"
      ]
    },
    "284": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "285": {
      "op": "bytec_3 // 0x0000000000000000",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x0000000000000000"
      ]
    },
    "286": {
      "op": "concat",
      "defined_out": [
        "newAuctionInstance#0"
      ],
      "stack_out": [
        "newAuctionInstance#0"
      ]
    },
    "287": {
      "op": "intc_1 // 0",
      "stack_out": [
        "newAuctionInstance#0",
        "0"
      ]
    },
    "288": {
      "op": "bytec_0 // \"auctionInstancesAmount\"",
      "stack_out": [
        "newAuctionInstance#0",
        "0",
        "\"auctionInstancesAmount\""
      ]
    },
    "289": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "newAuctionInstance#0"
      ],
      "stack_out": [
        "newAuctionInstance#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "290": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newAuctionInstance#0",
        "maybe_value%1#0"
      ]
    },
    "291": {
      "op": "itob",
      "defined_out": [
        "newAuctionInstance#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "newAuctionInstance#0",
        "tmp%8#0"
      ]
    },
    "292": {
      "op": "bytec_2 // \"auctionInstances\"",
      "defined_out": [
        "\"auctionInstances\"",
        "newAuctionInstance#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "newAuctionInstance#0",
        "tmp%8#0",
        "\"auctionInstances\""
      ]
    },
    "293": {
      "op": "swap",
      "stack_out": [
        "newAuctionInstance#0",
        "\"auctionInstances\"",
        "tmp%8#0"
      ]
    },
    "294": {
      "op": "concat",
      "defined_out": [
        "newAuctionInstance#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "newAuctionInstance#0",
        "tmp%9#0"
      ]
    },
    "295": {
      "op": "swap",
      "stack_out": [
        "tmp%9#0",
        "newAuctionInstance#0"
      ]
    },
    "296": {
      "op": "box_put",
      "stack_out": []
    },
    "297": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "298": {
      "op": "bytec_0 // \"auctionInstancesAmount\"",
      "stack_out": [
        "0",
        "\"auctionInstancesAmount\""
      ]
    },
    "299": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "300": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "301": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "302": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "303": {
      "op": "bytec_0 // \"auctionInstancesAmount\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"auctionInstancesAmount\""
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "\"auctionInstancesAmount\"",
        "new_state_value%0#0"
      ]
    },
    "305": {
      "op": "app_global_put",
      "stack_out": []
    },
    "306": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "307": {
      "op": "bytec_0 // \"auctionInstancesAmount\"",
      "stack_out": [
        "0",
        "\"auctionInstancesAmount\""
      ]
    },
    "308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "309": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "310": {
      "op": "intc_0 // 1",
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "311": {
      "op": "-",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "312": {
      "retsub": true,
      "op": "retsub"
    },
    "313": {
      "subroutine": "smart_contracts/htlc/auction.algo.ts::Auction.getCurrentPrice",
      "params": {
        "auctionId#0": "uint64"
      },
      "block": "getCurrentPrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "316": {
      "op": "frame_dig -1",
      "defined_out": [
        "auctionId#0 (copy)"
      ],
      "stack_out": [
        "auctionId#0 (copy)"
      ]
    },
    "318": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "319": {
      "op": "bytec_2 // \"auctionInstances\"",
      "defined_out": [
        "\"auctionInstances\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"auctionInstances\""
      ]
    },
    "320": {
      "op": "swap",
      "stack_out": [
        "\"auctionInstances\"",
        "tmp%0#0"
      ]
    },
    "321": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "322": {
      "op": "box_get",
      "defined_out": [
        "auctionInstance#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "maybe_exists%0#0"
      ]
    },
    "323": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "auctionInstance#0"
      ]
    },
    "324": {
      "callsub": "smart_contracts/htlc/auction.algo.ts::Auction.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "auctionInstance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "tmp%2#0"
      ]
    },
    "327": {
      "op": "dig 1",
      "defined_out": [
        "auctionInstance#0",
        "auctionInstance#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "tmp%2#0",
        "auctionInstance#0 (copy)"
      ]
    },
    "329": {
      "op": "pushint 112 // 112",
      "defined_out": [
        "112",
        "auctionInstance#0",
        "auctionInstance#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "tmp%2#0",
        "auctionInstance#0 (copy)",
        "112"
      ]
    },
    "331": {
      "op": "extract_uint64",
      "defined_out": [
        "auctionInstance#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "332": {
      "op": "-",
      "defined_out": [
        "auctionInstance#0",
        "elapsedTime#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0"
      ]
    },
    "333": {
      "op": "dig 1",
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "auctionInstance#0 (copy)"
      ]
    },
    "335": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "auctionInstance#0",
        "auctionInstance#0 (copy)",
        "elapsedTime#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "auctionInstance#0 (copy)",
        "24"
      ]
    },
    "337": {
      "op": "extract_uint64",
      "defined_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%6#0"
      ]
    },
    "338": {
      "op": "dig 2",
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%6#0",
        "auctionInstance#0 (copy)"
      ]
    },
    "340": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "auctionInstance#0",
        "auctionInstance#0 (copy)",
        "elapsedTime#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%6#0",
        "auctionInstance#0 (copy)",
        "32"
      ]
    },
    "342": {
      "op": "extract_uint64",
      "defined_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%10#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%6#0",
        "tmp%10#0"
      ]
    },
    "343": {
      "op": "dig 1",
      "defined_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%10#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%6#0",
        "tmp%10#0",
        "tmp%6#0 (copy)"
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "tmp%10#0"
      ]
    },
    "346": {
      "op": "-",
      "defined_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%11#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%6#0",
        "tmp%11#0"
      ]
    },
    "347": {
      "op": "uncover 3",
      "stack_out": [
        "elapsedTime#0",
        "tmp%6#0",
        "tmp%11#0",
        "auctionInstance#0"
      ]
    },
    "349": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "auctionInstance#0",
        "elapsedTime#0",
        "tmp%11#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "elapsedTime#0",
        "tmp%6#0",
        "tmp%11#0",
        "auctionInstance#0",
        "40"
      ]
    },
    "351": {
      "op": "extract_uint64",
      "defined_out": [
        "elapsedTime#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "elapsedTime#0",
        "tmp%6#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "352": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "tmp%13#0",
        "elapsedTime#0"
      ]
    },
    "354": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "elapsedTime#0",
        "tmp%13#0"
      ]
    },
    "355": {
      "op": "/",
      "defined_out": [
        "tmp%11#0",
        "tmp%14#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "356": {
      "op": "*",
      "defined_out": [
        "tmp%15#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%15#0"
      ]
    },
    "357": {
      "op": "-",
      "defined_out": [
        "price#0"
      ],
      "stack_out": [
        "price#0"
      ]
    },
    "358": {
      "retsub": true,
      "op": "retsub"
    },
    "359": {
      "subroutine": "smart_contracts/htlc/auction.algo.ts::Auction.bid",
      "params": {
        "auctionId#0": "uint64"
      },
      "block": "bid",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "362": {
      "op": "frame_dig -1",
      "defined_out": [
        "auctionId#0 (copy)"
      ],
      "stack_out": [
        "auctionId#0 (copy)"
      ]
    },
    "364": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "365": {
      "op": "bytec_2 // \"auctionInstances\"",
      "defined_out": [
        "\"auctionInstances\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"auctionInstances\""
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "\"auctionInstances\"",
        "tmp%0#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "368": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "369": {
      "op": "box_get",
      "defined_out": [
        "auctionInstance#0",
        "maybe_exists%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "auctionInstance#0",
        "maybe_exists%0#0"
      ]
    },
    "370": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "auctionInstance#0"
      ]
    },
    "371": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "auctionInstance#0",
        "auctionId#0 (copy)"
      ]
    },
    "373": {
      "callsub": "smart_contracts/htlc/auction.algo.ts::Auction.getCurrentPrice",
      "op": "callsub getCurrentPrice",
      "defined_out": [
        "auctionInstance#0",
        "currentPrice#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "auctionInstance#0",
        "currentPrice#0"
      ]
    },
    "376": {
      "op": "txn Sender",
      "defined_out": [
        "assigned_value%0#0",
        "auctionInstance#0",
        "currentPrice#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "auctionInstance#0",
        "currentPrice#0",
        "assigned_value%0#0"
      ]
    },
    "378": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "currentPrice#0",
        "assigned_value%0#0",
        "auctionInstance#0"
      ]
    },
    "380": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "currentPrice#0",
        "auctionInstance#0",
        "assigned_value%0#0"
      ]
    },
    "381": {
      "op": "replace2 80",
      "stack_out": [
        "tmp%1#0",
        "currentPrice#0",
        "auctionInstance#0"
      ]
    },
    "383": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "auctionInstance#0",
        "currentPrice#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "currentPrice#0",
        "auctionInstance#0",
        "0x0000000000000001"
      ]
    },
    "393": {
      "op": "replace2 120",
      "stack_out": [
        "tmp%1#0",
        "currentPrice#0",
        "auctionInstance#0"
      ]
    },
    "395": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "auctionInstance#0",
        "currentPrice#0"
      ]
    },
    "396": {
      "op": "itob",
      "defined_out": [
        "auctionInstance#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "auctionInstance#0",
        "val_as_bytes%0#0"
      ]
    },
    "397": {
      "op": "replace2 128",
      "stack_out": [
        "tmp%1#0",
        "auctionInstance#0"
      ]
    },
    "399": {
      "op": "box_put",
      "stack_out": []
    },
    "400": {
      "retsub": true,
      "op": "retsub"
    },
    "401": {
      "subroutine": "smart_contracts/htlc/auction.algo.ts::Auction.latestTimestamp",
      "params": {},
      "block": "latestTimestamp",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "retsub": true,
      "op": "retsub"
    }
  }
}