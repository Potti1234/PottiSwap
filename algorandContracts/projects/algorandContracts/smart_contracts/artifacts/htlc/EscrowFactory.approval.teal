#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 6
    // smart_contracts/htlc/escrowFactory.algo.ts:18
    // export class EscrowFactory extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x54787c90 // method "createEscrow(uint64,byte[32])uint64"
    txna ApplicationArgs 0
    match main_createEscrow_route@3

main_after_if_else@10:
    // smart_contracts/htlc/escrowFactory.algo.ts:18
    // export class EscrowFactory extends Contract {
    intc_0 // 0
    return

main_createEscrow_route@3:
    // smart_contracts/htlc/escrowFactory.algo.ts:27
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/escrowFactory.algo.ts:18
    // export class EscrowFactory extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // smart_contracts/htlc/escrowFactory.algo.ts:27
    // @arc4.abimethod()
    callsub createEscrow
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@6:
    // smart_contracts/htlc/escrowFactory.algo.ts:18
    // export class EscrowFactory extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/htlc/escrowFactory.algo.ts::EscrowFactory.createEscrow(timelock: uint64, secretHash: bytes) -> uint64:
createEscrow:
    // smart_contracts/htlc/escrowFactory.algo.ts:27-28
    // @arc4.abimethod()
    // public createEscrow(timelock: uint64, secretHash: arc4.StaticBytes<32>): uint64 {
    proto 2 1
    // smart_contracts/htlc/escrowFactory.algo.ts:29
    // const txnDeposit = gtxn.PaymentTxn(0);
    intc_0 // 0
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    intc_0 // 0
    // smart_contracts/htlc/escrowFactory.algo.ts:30
    // assert(txnDeposit.receiver === Global.currentApplicationAddress, "Receiver must be the escrow app");
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Receiver must be the escrow app
    // smart_contracts/htlc/escrowFactory.algo.ts:29
    // const txnDeposit = gtxn.PaymentTxn(0);
    intc_0 // 0
    // smart_contracts/htlc/escrowFactory.algo.ts:31
    // assert(txnDeposit.sender === Txn.sender, "Sender of deposit must be the same as the sender of the app call");
    gtxns Sender
    txn Sender
    ==
    assert // Sender of deposit must be the same as the sender of the app call
    // smart_contracts/htlc/escrowFactory.algo.ts:29
    // const txnDeposit = gtxn.PaymentTxn(0);
    intc_0 // 0
    // smart_contracts/htlc/escrowFactory.algo.ts:33
    // assert(txnDeposit.amount > 0, "Deposit should be positive number");
    gtxns Amount
    dup
    assert // Deposit should be positive number
    // smart_contracts/htlc/escrowFactory.algo.ts:38-44
    // const escrowAppId = itxn
    //   .applicationCall({
    //     approvalProgram: compiled_escrow_contract.approvalProgram,
    //     clearStateProgram: compiled_escrow_contract.clearStateProgram,
    //     fee: Global.minTxnFee,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/htlc/escrowFactory.algo.ts:42
    // fee: Global.minTxnFee,
    global MinTxnFee
    // smart_contracts/htlc/escrowFactory.algo.ts:35
    // const compiled_escrow_contract = compile(Escrow);
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAAEmBgZhbW91bnQKcmVzY3VlVGltZQQVH3x1CnNlY3JldEhhc2gFdGFrZXIHY3JlYXRvcjEbQQCTggUECSP9EwQBDowPBDHyapsE3uE94QRkzNkwNhoAjgUASQA6AC4AEwACIkMxGRREMRhEiAEGFipMULAjQzEZFEQxGEQ2GgGIAOtJFRZXBgJMUCpMULAjQzEZFEQxGESIAKgjQzEZFEQxGEQ2GgGIAHUjQzEZFEQxGEQxFiMJSTgQIxJENhoBFzYaAjYaA4gADSNDMRlA/5IxGBREI0OKBACL/DgHMgoSRIv8OAAxABJEi/w4CChMZyIoZUREiAB8gAtjcmVhdGVkVGltZUxnMgeL/QgpTGcri/5nJwSL/2cnBTEAZ4mKAQCL/4gARyIrZUQSRIgARSIpZUQMRCInBGVEIihlRIgAF4kiKWVEiAArDEQiJwVlRCIoZUSIAAGJigIAsTIAi/6yB4v/sggjshCyAbOJigEBi/8CiTIHiQ==)
    itxn_field ApprovalProgramPages
    // smart_contracts/htlc/escrowFactory.algo.ts:38-43
    // const escrowAppId = itxn
    //   .applicationCall({
    //     approvalProgram: compiled_escrow_contract.approvalProgram,
    //     clearStateProgram: compiled_escrow_contract.clearStateProgram,
    //     fee: Global.minTxnFee,
    //   })
    intc_2 // 6
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/htlc/escrowFactory.algo.ts:38-44
    // const escrowAppId = itxn
    //   .applicationCall({
    //     approvalProgram: compiled_escrow_contract.approvalProgram,
    //     clearStateProgram: compiled_escrow_contract.clearStateProgram,
    //     fee: Global.minTxnFee,
    //   })
    //   .submit();
    itxn_submit
    itxn ApplicationID
    // smart_contracts/htlc/escrowFactory.algo.ts:46
    // assert(escrowAppId.appId.id > 0, "Escrow contract creation failed");
    dup
    assert // Escrow contract creation failed
    // smart_contracts/htlc/escrowFactory.algo.ts:47
    // const escrowAppAddress = escrowAppId.accounts(0);
    itxna Accounts 0
    // smart_contracts/htlc/escrowFactory.algo.ts:50-56
    // const escrowCall = itxn
    //   .applicationCall({
    //     appId: escrowAppId.appId.id,
    //     appArgs: [timelock, secretHash.bytes, Global.currentApplicationAddress.bytes],
    //     fee: Global.minTxnFee,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/htlc/escrowFactory.algo.ts:54
    // fee: Global.minTxnFee,
    global MinTxnFee
    // smart_contracts/htlc/escrowFactory.algo.ts:53
    // appArgs: [timelock, secretHash.bytes, Global.currentApplicationAddress.bytes],
    frame_dig -2
    itob
    global CurrentApplicationAddress
    swap
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    dig 2
    itxn_field ApplicationID
    // smart_contracts/htlc/escrowFactory.algo.ts:50-55
    // const escrowCall = itxn
    //   .applicationCall({
    //     appId: escrowAppId.appId.id,
    //     appArgs: [timelock, secretHash.bytes, Global.currentApplicationAddress.bytes],
    //     fee: Global.minTxnFee,
    //   })
    intc_2 // 6
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/htlc/escrowFactory.algo.ts:50-56
    // const escrowCall = itxn
    //   .applicationCall({
    //     appId: escrowAppId.appId.id,
    //     appArgs: [timelock, secretHash.bytes, Global.currentApplicationAddress.bytes],
    //     fee: Global.minTxnFee,
    //   })
    //   .submit();
    itxn_submit
    // smart_contracts/htlc/escrowFactory.algo.ts:59-65
    // const deposit = itxn
    //   .payment({
    //     amount: txnDeposit.amount,
    //     receiver: escrowAppAddress,
    //     sender: Txn.sender,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/htlc/escrowFactory.algo.ts:63
    // sender: Txn.sender,
    txn Sender
    itxn_field Sender
    itxn_field Receiver
    swap
    itxn_field Amount
    // smart_contracts/htlc/escrowFactory.algo.ts:59-64
    // const deposit = itxn
    //   .payment({
    //     amount: txnDeposit.amount,
    //     receiver: escrowAppAddress,
    //     sender: Txn.sender,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/htlc/escrowFactory.algo.ts:59-65
    // const deposit = itxn
    //   .payment({
    //     amount: txnDeposit.amount,
    //     receiver: escrowAppAddress,
    //     sender: Txn.sender,
    //   })
    //   .submit();
    itxn_submit
    // smart_contracts/htlc/escrowFactory.algo.ts:67
    // return escrowAppId.appId.id;
    retsub
