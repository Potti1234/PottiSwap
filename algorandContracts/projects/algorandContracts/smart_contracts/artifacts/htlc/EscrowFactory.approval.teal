#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "deployedEscrowAppIds"
    // smart_contracts/htlc/escrowFactory.algo.ts:18
    // export class EscrowFactory extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x18909d34 // method "createEscrow(uint64,byte[32],uint64)uint64"
    txna ApplicationArgs 0
    match main_createEscrow_route@3

main_after_if_else@10:
    // smart_contracts/htlc/escrowFactory.algo.ts:18
    // export class EscrowFactory extends Contract {
    intc_0 // 0
    return

main_createEscrow_route@3:
    // smart_contracts/htlc/escrowFactory.algo.ts:29
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/escrowFactory.algo.ts:18
    // export class EscrowFactory extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // smart_contracts/htlc/escrowFactory.algo.ts:29
    // @arc4.abimethod()
    callsub createEscrow
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@6:
    // smart_contracts/htlc/escrowFactory.algo.ts:18
    // export class EscrowFactory extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/htlc/escrowFactory.algo.ts::EscrowFactory.createEscrow(timelock: uint64, secretHash: bytes, escrowAppId: uint64) -> uint64:
createEscrow:
    // smart_contracts/htlc/escrowFactory.algo.ts:29-30
    // @arc4.abimethod()
    // public createEscrow(timelock: uint64, secretHash: arc4.StaticBytes<32>, escrowAppId: uint64): uint64 {
    proto 3 1
    // smart_contracts/htlc/escrowFactory.algo.ts:31
    // const txnDeposit = gtxn.PaymentTxn(0);
    intc_0 // 0
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    intc_0 // 0
    // smart_contracts/htlc/escrowFactory.algo.ts:32
    // assert(txnDeposit.receiver === Global.currentApplicationAddress, "Receiver must be the escrow app");
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Receiver must be the escrow app
    // smart_contracts/htlc/escrowFactory.algo.ts:31
    // const txnDeposit = gtxn.PaymentTxn(0);
    intc_0 // 0
    // smart_contracts/htlc/escrowFactory.algo.ts:33
    // assert(txnDeposit.sender === Txn.sender, "Sender of deposit must be the same as the sender of the app call");
    gtxns Sender
    txn Sender
    ==
    assert // Sender of deposit must be the same as the sender of the app call
    // smart_contracts/htlc/escrowFactory.algo.ts:31
    // const txnDeposit = gtxn.PaymentTxn(0);
    intc_0 // 0
    // smart_contracts/htlc/escrowFactory.algo.ts:35
    // assert(txnDeposit.amount > 0, "Deposit should be positive number");
    gtxns Amount
    dup
    assert // Deposit should be positive number
    // smart_contracts/htlc/escrowFactory.algo.ts:47
    // fee: Global.minTxnFee,
    global MinTxnFee
    // smart_contracts/htlc/escrowFactory.algo.ts:41-45
    // arc4.methodSelector("create(uint64,bytes32,address,address)"),
    // timelock,
    // secretHash.bytes,
    // Global.currentApplicationAddress,
    // Txn.sender,
    frame_dig -3
    itob
    // smart_contracts/htlc/escrowFactory.algo.ts:44
    // Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/htlc/escrowFactory.algo.ts:45
    // Txn.sender,
    txn Sender
    // smart_contracts/htlc/escrowFactory.algo.ts:55
    // fee: Global.minTxnFee,
    global MinTxnFee
    // smart_contracts/htlc/escrowFactory.algo.ts:53
    // receiver: Application(escrowAppId).address,
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/htlc/escrowFactory.algo.ts:54
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/htlc/escrowFactory.algo.ts:58
    // const [escrowCallResult, depositResult] = itxn.submitGroup(escrowCall, deposit);
    itxn_begin
    // smart_contracts/htlc/escrowFactory.algo.ts:41
    // arc4.methodSelector("create(uint64,bytes32,address,address)"),
    pushbytes 0x497442fe // method "create(uint64,bytes32,address,address)"
    itxn_field ApplicationArgs
    uncover 5
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    uncover 4
    itxn_field ApplicationArgs
    uncover 3
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    // smart_contracts/htlc/escrowFactory.algo.ts:38-48
    // const escrowCall = itxn.applicationCall({
    //   appId: escrowAppId,
    //   appArgs: [
    //     arc4.methodSelector("create(uint64,bytes32,address,address)"),
    //     timelock,
    //     secretHash.bytes,
    //     Global.currentApplicationAddress,
    //     Txn.sender,
    //   ],
    //   fee: Global.minTxnFee,
    // });
    pushint 6 // 6
    itxn_field TypeEnum
    uncover 3
    itxn_field Fee
    // smart_contracts/htlc/escrowFactory.algo.ts:58
    // const [escrowCallResult, depositResult] = itxn.submitGroup(escrowCall, deposit);
    itxn_next
    itxn_field Sender
    itxn_field Receiver
    swap
    itxn_field Amount
    // smart_contracts/htlc/escrowFactory.algo.ts:51-56
    // const deposit = itxn.payment({
    //   amount: txnDeposit.amount,
    //   receiver: Application(escrowAppId).address,
    //   sender: Global.currentApplicationAddress,
    //   fee: Global.minTxnFee,
    // });
    intc_1 // 1
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/htlc/escrowFactory.algo.ts:58
    // const [escrowCallResult, depositResult] = itxn.submitGroup(escrowCall, deposit);
    itxn_submit
    // smart_contracts/htlc/escrowFactory.algo.ts:19
    // public deployedEscrowAppIds = GlobalState<uint64>();
    intc_0 // 0
    bytec_0 // "deployedEscrowAppIds"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/escrowFactory.algo.ts:60
    // this.deployedEscrowAppIds.value++;
    intc_1 // 1
    +
    // smart_contracts/htlc/escrowFactory.algo.ts:19
    // public deployedEscrowAppIds = GlobalState<uint64>();
    bytec_0 // "deployedEscrowAppIds"
    // smart_contracts/htlc/escrowFactory.algo.ts:60
    // this.deployedEscrowAppIds.value++;
    swap
    app_global_put
    // smart_contracts/htlc/escrowFactory.algo.ts:19
    // public deployedEscrowAppIds = GlobalState<uint64>();
    intc_0 // 0
    bytec_0 // "deployedEscrowAppIds"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/escrowFactory.algo.ts:62
    // return this.deployedEscrowAppIds.value;
    retsub
