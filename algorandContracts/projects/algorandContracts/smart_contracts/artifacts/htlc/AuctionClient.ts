/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Auction","structs":{},"methods":[{"name":"createAuction","args":[{"type":"uint64","name":"startPrice","desc":"Start Price of the auction"},{"type":"uint64","name":"minPrice","desc":"Minimum Price of the auction"},{"type":"uint64","name":"duration","desc":"Duration of the auction in seconds"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCurrentPrice","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"bid","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"latestTimestamp","args":[],"returns":{"type":"uint64","desc":"Current time of the blockchain"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get current time","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":5,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"auctionId":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXVjdGlvbklk"},"startPrice":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3RhcnRQcmljZQ=="},"minPrice":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluUHJpY2U="},"duration":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZHVyYXRpb24="},"creator":{"keyType":"AVMString","valueType":"address","key":"Y3JlYXRvcg=="},"taker":{"keyType":"AVMString","valueType":"address","key":"dGFrZXI="},"startTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3RhcnRUaW1l"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[191],"errorMessage":"Duration must be positive"},{"pc":[188],"errorMessage":"Min price must be positive"},{"pc":[102,119,131,148],"errorMessage":"OnCompletion is not NoOp"},{"pc":[185],"errorMessage":"Start price must be positive"},{"pc":[177],"errorMessage":"can only call when creating"},{"pc":[105,122,134,151],"errorMessage":"can only call when not creating"},{"pc":[252,257,261,265,270],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBgpzdGFydFByaWNlBBUffHUIbWluUHJpY2UIZHVyYXRpb24FdGFrZXIJc3RhcnRUaW1lMRtBAGuCBAQincVbBNFxf+UE4I7yHgRkzNkwNhoAjgQAMAAfABMAAiJDMRkURDEYRIgArxYpTFCwI0MxGRREMRhEiACYI0MxGRREMRhEiABrFilMULAjQzEZFEQxGEQ2GgEXNhoCFzYaAxeIAA0jQzEZQP+zMRgURCNDigMAi/1Ei/5Ei/9EiABZgAlhdWN0aW9uSWRMZyiL/Wcqi/5nK4v/Z4AHY3JlYXRvcjEAZycEMQBniAAsJwVMZ4mIACQiJwVlRAkiKGVEIihlRCIqZUQJIitlRE8DTAoLCYknBDEAZ4kyB4k=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Auction contract
 */
export type AuctionArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createAuction(uint64,uint64,uint64)void': {
      /**
       * Start Price of the auction
       */
      startPrice: bigint | number
      /**
       * Minimum Price of the auction
       */
      minPrice: bigint | number
      /**
       * Duration of the auction in seconds
       */
      duration: bigint | number
    }
    'getCurrentPrice()uint64': Record<string, never>
    'bid()void': Record<string, never>
    'latestTimestamp()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createAuction(uint64,uint64,uint64)void': [startPrice: bigint | number, minPrice: bigint | number, duration: bigint | number]
    'getCurrentPrice()uint64': []
    'bid()void': []
    'latestTimestamp()uint64': []
  }
}

/**
 * The return type for each method
 */
export type AuctionReturns = {
  'createAuction(uint64,uint64,uint64)void': void
  'getCurrentPrice()uint64': bigint
  'bid()void': void
  'latestTimestamp()uint64': bigint
}

/**
 * Defines the types of available calls and state of the Auction smart contract.
 */
export type AuctionTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createAuction(uint64,uint64,uint64)void' | 'createAuction', {
      argsObj: AuctionArgs['obj']['createAuction(uint64,uint64,uint64)void']
      argsTuple: AuctionArgs['tuple']['createAuction(uint64,uint64,uint64)void']
      returns: AuctionReturns['createAuction(uint64,uint64,uint64)void']
    }>
    & Record<'getCurrentPrice()uint64' | 'getCurrentPrice', {
      argsObj: AuctionArgs['obj']['getCurrentPrice()uint64']
      argsTuple: AuctionArgs['tuple']['getCurrentPrice()uint64']
      returns: AuctionReturns['getCurrentPrice()uint64']
    }>
    & Record<'bid()void' | 'bid', {
      argsObj: AuctionArgs['obj']['bid()void']
      argsTuple: AuctionArgs['tuple']['bid()void']
      returns: AuctionReturns['bid()void']
    }>
    & Record<'latestTimestamp()uint64' | 'latestTimestamp', {
      argsObj: AuctionArgs['obj']['latestTimestamp()uint64']
      argsTuple: AuctionArgs['tuple']['latestTimestamp()uint64']
      /**
       * Current time of the blockchain
       */
      returns: AuctionReturns['latestTimestamp()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        auctionId: bigint
        startPrice: bigint
        minPrice: bigint
        duration: bigint
        creator: string
        taker: string
        startTime: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AuctionSignatures = keyof AuctionTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AuctionNonVoidMethodSignatures = keyof AuctionTypes['methods'] extends infer T ? T extends keyof AuctionTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Auction smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AuctionSignatures> = AuctionTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Auction smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AuctionSignatures> = AuctionTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AuctionTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AuctionCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AuctionDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AuctionCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Auction smart contract
 */
export abstract class AuctionParamsFactory {
  /**
   * Constructs a no op call for the createAuction(uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createAuction(params: CallParams<AuctionArgs['obj']['createAuction(uint64,uint64,uint64)void'] | AuctionArgs['tuple']['createAuction(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createAuction(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.startPrice, params.args.minPrice, params.args.duration],
    }
  }
  /**
   * Constructs a no op call for the getCurrentPrice()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentPrice(params: CallParams<AuctionArgs['obj']['getCurrentPrice()uint64'] | AuctionArgs['tuple']['getCurrentPrice()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentPrice()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the bid()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bid(params: CallParams<AuctionArgs['obj']['bid()void'] | AuctionArgs['tuple']['bid()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bid()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the latestTimestamp()uint64 ABI method
   *
   * Get current time
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static latestTimestamp(params: CallParams<AuctionArgs['obj']['latestTimestamp()uint64'] | AuctionArgs['tuple']['latestTimestamp()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'latestTimestamp()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Auction smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AuctionFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AuctionFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AuctionClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AuctionClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Auction smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AuctionDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AuctionClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Auction smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Auction smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Auction smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AuctionClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Auction smart contract
 */
export class AuctionClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AuctionClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Auction app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AuctionClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AuctionNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AuctionClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AuctionClient> {
    return new AuctionClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AuctionClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AuctionClient> {
    return new AuctionClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Auction smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Auction smart contract using the `createAuction(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createAuction: (params: CallParams<AuctionArgs['obj']['createAuction(uint64,uint64,uint64)void'] | AuctionArgs['tuple']['createAuction(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AuctionParamsFactory.createAuction(params))
    },

    /**
     * Makes a call to the Auction smart contract using the `getCurrentPrice()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentPrice: (params: CallParams<AuctionArgs['obj']['getCurrentPrice()uint64'] | AuctionArgs['tuple']['getCurrentPrice()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AuctionParamsFactory.getCurrentPrice(params))
    },

    /**
     * Makes a call to the Auction smart contract using the `bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bid: (params: CallParams<AuctionArgs['obj']['bid()void'] | AuctionArgs['tuple']['bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AuctionParamsFactory.bid(params))
    },

    /**
     * Makes a call to the Auction smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call params: Current time of the blockchain
     */
    latestTimestamp: (params: CallParams<AuctionArgs['obj']['latestTimestamp()uint64'] | AuctionArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AuctionParamsFactory.latestTimestamp(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Auction smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Auction smart contract using the `createAuction(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createAuction: (params: CallParams<AuctionArgs['obj']['createAuction(uint64,uint64,uint64)void'] | AuctionArgs['tuple']['createAuction(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AuctionParamsFactory.createAuction(params))
    },

    /**
     * Makes a call to the Auction smart contract using the `getCurrentPrice()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentPrice: (params: CallParams<AuctionArgs['obj']['getCurrentPrice()uint64'] | AuctionArgs['tuple']['getCurrentPrice()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AuctionParamsFactory.getCurrentPrice(params))
    },

    /**
     * Makes a call to the Auction smart contract using the `bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bid: (params: CallParams<AuctionArgs['obj']['bid()void'] | AuctionArgs['tuple']['bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AuctionParamsFactory.bid(params))
    },

    /**
     * Makes a call to the Auction smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Current time of the blockchain
     */
    latestTimestamp: (params: CallParams<AuctionArgs['obj']['latestTimestamp()uint64'] | AuctionArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AuctionParamsFactory.latestTimestamp(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Auction smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Auction smart contract using the `createAuction(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createAuction: async (params: CallParams<AuctionArgs['obj']['createAuction(uint64,uint64,uint64)void'] | AuctionArgs['tuple']['createAuction(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AuctionParamsFactory.createAuction(params))
      return {...result, return: result.return as unknown as (undefined | AuctionReturns['createAuction(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the Auction smart contract using the `getCurrentPrice()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentPrice: async (params: CallParams<AuctionArgs['obj']['getCurrentPrice()uint64'] | AuctionArgs['tuple']['getCurrentPrice()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AuctionParamsFactory.getCurrentPrice(params))
      return {...result, return: result.return as unknown as (undefined | AuctionReturns['getCurrentPrice()uint64'])}
    },

    /**
     * Makes a call to the Auction smart contract using the `bid()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bid: async (params: CallParams<AuctionArgs['obj']['bid()void'] | AuctionArgs['tuple']['bid()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AuctionParamsFactory.bid(params))
      return {...result, return: result.return as unknown as (undefined | AuctionReturns['bid()void'])}
    },

    /**
     * Makes a call to the Auction smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call result: Current time of the blockchain
     */
    latestTimestamp: async (params: CallParams<AuctionArgs['obj']['latestTimestamp()uint64'] | AuctionArgs['tuple']['latestTimestamp()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AuctionParamsFactory.latestTimestamp(params))
      return {...result, return: result.return as unknown as (undefined | AuctionReturns['latestTimestamp()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AuctionClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Auction smart contract using the `getCurrentPrice()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getCurrentPrice(params: CallParams<AuctionArgs['obj']['getCurrentPrice()uint64'] | AuctionArgs['tuple']['getCurrentPrice()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AuctionParamsFactory.getCurrentPrice(params))
    return result.return as unknown as AuctionReturns['getCurrentPrice()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Auction smart contract using the `latestTimestamp()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get current time
   *
   * @param params The params for the smart contract call
   * @returns The call result: Current time of the blockchain
   */
  async latestTimestamp(params: CallParams<AuctionArgs['obj']['latestTimestamp()uint64'] | AuctionArgs['tuple']['latestTimestamp()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AuctionParamsFactory.latestTimestamp(params))
    return result.return as unknown as AuctionReturns['latestTimestamp()uint64']
  }

  /**
   * Methods to access state for the current Auction app
   */
  state = {
    /**
     * Methods to access global state for the current Auction app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          auctionId: result.auctionId,
          startPrice: result.startPrice,
          minPrice: result.minPrice,
          duration: result.duration,
          creator: result.creator,
          taker: result.taker,
          startTime: result.startTime,
        }
      },
      /**
       * Get the current value of the auctionId key in global state
       */
      auctionId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("auctionId")) as bigint | undefined },
      /**
       * Get the current value of the startPrice key in global state
       */
      startPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startPrice")) as bigint | undefined },
      /**
       * Get the current value of the minPrice key in global state
       */
      minPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minPrice")) as bigint | undefined },
      /**
       * Get the current value of the duration key in global state
       */
      duration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("duration")) as bigint | undefined },
      /**
       * Get the current value of the creator key in global state
       */
      creator: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creator")) as string | undefined },
      /**
       * Get the current value of the taker key in global state
       */
      taker: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("taker")) as string | undefined },
      /**
       * Get the current value of the startTime key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startTime")) as bigint | undefined },
    },
  }

  public newGroup(): AuctionComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createAuction(uint64,uint64,uint64)void method call against the Auction contract
       */
      createAuction(params: CallParams<AuctionArgs['obj']['createAuction(uint64,uint64,uint64)void'] | AuctionArgs['tuple']['createAuction(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createAuction(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getCurrentPrice()uint64 method call against the Auction contract
       */
      getCurrentPrice(params: CallParams<AuctionArgs['obj']['getCurrentPrice()uint64'] | AuctionArgs['tuple']['getCurrentPrice()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentPrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentPrice()uint64', v))
        return this
      },
      /**
       * Add a bid()void method call against the Auction contract
       */
      bid(params: CallParams<AuctionArgs['obj']['bid()void'] | AuctionArgs['tuple']['bid()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bid(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a latestTimestamp()uint64 method call against the Auction contract
       */
      latestTimestamp(params: CallParams<AuctionArgs['obj']['latestTimestamp()uint64'] | AuctionArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.latestTimestamp(params)))
        resultMappers.push((v) => client.decodeReturnValue('latestTimestamp()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the Auction contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AuctionComposer
  }
}
export type AuctionComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createAuction(uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAuction(params?: CallParams<AuctionArgs['obj']['createAuction(uint64,uint64,uint64)void'] | AuctionArgs['tuple']['createAuction(uint64,uint64,uint64)void']>): AuctionComposer<[...TReturns, AuctionReturns['createAuction(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the getCurrentPrice()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentPrice(params?: CallParams<AuctionArgs['obj']['getCurrentPrice()uint64'] | AuctionArgs['tuple']['getCurrentPrice()uint64']>): AuctionComposer<[...TReturns, AuctionReturns['getCurrentPrice()uint64'] | undefined]>

  /**
   * Calls the bid()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bid(params?: CallParams<AuctionArgs['obj']['bid()void'] | AuctionArgs['tuple']['bid()void']>): AuctionComposer<[...TReturns, AuctionReturns['bid()void'] | undefined]>

  /**
   * Calls the latestTimestamp()uint64 ABI method.
   *
   * Get current time
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  latestTimestamp(params?: CallParams<AuctionArgs['obj']['latestTimestamp()uint64'] | AuctionArgs['tuple']['latestTimestamp()uint64']>): AuctionComposer<[...TReturns, AuctionReturns['latestTimestamp()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Auction smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AuctionComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AuctionComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AuctionComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AuctionComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AuctionComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AuctionComposerResults<TReturns>>
}
export type AuctionComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

