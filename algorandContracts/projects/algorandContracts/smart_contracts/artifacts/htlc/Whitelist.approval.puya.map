{
  "version": 3,
  "sources": [
    "/home/lukas/CodingProjects/PottiSwap/algorandContracts/projects/algorandContracts/smart_contracts/htlc/whitelist.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAsBG;;AAAA;AAAA;AAAA;;AAAA;AAtBH;;;AAAA;AAsBG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAhBH;;;AAAA;AAgBG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAVH;;;AAAA;AAUG;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AALH;;;AAAA;AAKG;;;AAAA;;AALH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAKE;;;AAFA;AAIE;;AAAA;;AAGF;;;AAPA;AAAA;AAAA;AAAA;AASyC;;AAAhC;AAAP;AACA;;AAAA;AAX8C;AAAA;AAAA;AAWhB;AAA9B;AAAA;;AAGF;;;AAbA;AAAA;AAAA;AAAA;AAeyC;;AAAhC;AAAP;AACA;;AAAA;AAjB8C;AAAA;AAAA;AAiBxB;;;AAGxB;;;AAES;;AAAA;AAtBuC;AAAA;AAAA;AAsBjB;AAAA;;AAA7B",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"factoryAppId\" \"whitelist\""
    },
    "30": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "32": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "35": {
      "op": "pushbytess 0x36630a35 0x77f3a0b6 0x2888339d 0xff6bebe3 // method \"createWhitelist(uint64)void\", method \"addToWhitelist(uint64)void\", method \"removeFromWhitelist(uint64)void\", method \"isWhitelisted(uint64)bool\"",
      "defined_out": [
        "Method(addToWhitelist(uint64)void)",
        "Method(createWhitelist(uint64)void)",
        "Method(isWhitelisted(uint64)bool)",
        "Method(removeFromWhitelist(uint64)void)"
      ],
      "stack_out": [
        "Method(createWhitelist(uint64)void)",
        "Method(addToWhitelist(uint64)void)",
        "Method(removeFromWhitelist(uint64)void)",
        "Method(isWhitelisted(uint64)bool)"
      ]
    },
    "57": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addToWhitelist(uint64)void)",
        "Method(createWhitelist(uint64)void)",
        "Method(isWhitelisted(uint64)bool)",
        "Method(removeFromWhitelist(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createWhitelist(uint64)void)",
        "Method(addToWhitelist(uint64)void)",
        "Method(removeFromWhitelist(uint64)void)",
        "Method(isWhitelisted(uint64)bool)",
        "tmp%2#0"
      ]
    },
    "60": {
      "op": "match main_createWhitelist_route@3 main_addToWhitelist_route@4 main_removeFromWhitelist_route@5 main_isWhitelisted_route@6",
      "stack_out": []
    },
    "70": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "71": {
      "op": "return",
      "stack_out": []
    },
    "72": {
      "block": "main_isWhitelisted_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "74": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "75": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "76": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "78": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "79": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "82": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "83": {
      "callsub": "smart_contracts/htlc/whitelist.algo.ts::Whitelist.isWhitelisted",
      "op": "callsub isWhitelisted",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "86": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "89": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "90": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "92": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "93": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "101": {
      "op": "log",
      "stack_out": []
    },
    "102": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": []
    },
    "104": {
      "block": "main_removeFromWhitelist_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "106": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "107": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "108": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "110": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "111": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "114": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "115": {
      "callsub": "smart_contracts/htlc/whitelist.algo.ts::Whitelist.removeFromWhitelist",
      "op": "callsub removeFromWhitelist",
      "stack_out": []
    },
    "118": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "119": {
      "op": "return",
      "stack_out": []
    },
    "120": {
      "block": "main_addToWhitelist_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "122": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "123": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "124": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "126": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "127": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "130": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "131": {
      "callsub": "smart_contracts/htlc/whitelist.algo.ts::Whitelist.addToWhitelist",
      "op": "callsub addToWhitelist",
      "stack_out": []
    },
    "134": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "return",
      "stack_out": []
    },
    "136": {
      "block": "main_createWhitelist_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "138": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "142": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "143": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "146": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "147": {
      "callsub": "smart_contracts/htlc/whitelist.algo.ts::Whitelist.createWhitelist",
      "op": "callsub createWhitelist",
      "stack_out": []
    },
    "150": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "return",
      "stack_out": []
    },
    "152": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "154": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "159": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "160": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "161": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "return",
      "stack_out": []
    },
    "163": {
      "subroutine": "smart_contracts/htlc/whitelist.algo.ts::Whitelist.createWhitelist",
      "params": {
        "factoryAppId#0": "uint64"
      },
      "block": "createWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "166": {
      "op": "bytec_0 // \"factoryAppId\"",
      "defined_out": [
        "\"factoryAppId\""
      ],
      "stack_out": [
        "\"factoryAppId\""
      ]
    },
    "167": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"factoryAppId\"",
        "factoryAppId#0 (copy)"
      ],
      "stack_out": [
        "\"factoryAppId\"",
        "factoryAppId#0 (copy)"
      ]
    },
    "169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "170": {
      "retsub": true,
      "op": "retsub"
    },
    "171": {
      "subroutine": "smart_contracts/htlc/whitelist.algo.ts::Whitelist.addToWhitelist",
      "params": {
        "appId#0": "uint64"
      },
      "block": "addToWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "174": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "175": {
      "op": "bytec_0 // \"factoryAppId\"",
      "defined_out": [
        "\"factoryAppId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"factoryAppId\""
      ]
    },
    "176": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "177": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "178": {
      "op": "txn ApplicationID",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "181": {
      "error": "Not authorized to add to whitelist",
      "op": "assert // Not authorized to add to whitelist",
      "stack_out": []
    },
    "182": {
      "op": "frame_dig -1",
      "defined_out": [
        "appId#0 (copy)"
      ],
      "stack_out": [
        "appId#0 (copy)"
      ]
    },
    "184": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "185": {
      "op": "bytec_1 // \"whitelist\"",
      "defined_out": [
        "\"whitelist\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"whitelist\""
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "\"whitelist\"",
        "tmp%2#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "188": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "189": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "190": {
      "op": "box_put",
      "stack_out": []
    },
    "191": {
      "retsub": true,
      "op": "retsub"
    },
    "192": {
      "subroutine": "smart_contracts/htlc/whitelist.algo.ts::Whitelist.removeFromWhitelist",
      "params": {
        "appId#0": "uint64"
      },
      "block": "removeFromWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "195": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "196": {
      "op": "bytec_0 // \"factoryAppId\"",
      "defined_out": [
        "\"factoryAppId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"factoryAppId\""
      ]
    },
    "197": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "198": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "199": {
      "op": "txn ApplicationID",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "201": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "202": {
      "error": "Not authorized to remove from whitelist",
      "op": "assert // Not authorized to remove from whitelist",
      "stack_out": []
    },
    "203": {
      "op": "frame_dig -1",
      "defined_out": [
        "appId#0 (copy)"
      ],
      "stack_out": [
        "appId#0 (copy)"
      ]
    },
    "205": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "206": {
      "op": "bytec_1 // \"whitelist\"",
      "defined_out": [
        "\"whitelist\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"whitelist\""
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "\"whitelist\"",
        "tmp%2#0"
      ]
    },
    "208": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "209": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "210": {
      "op": "pop",
      "stack_out": []
    },
    "211": {
      "retsub": true,
      "op": "retsub"
    },
    "212": {
      "subroutine": "smart_contracts/htlc/whitelist.algo.ts::Whitelist.isWhitelisted",
      "params": {
        "appId#0": "uint64"
      },
      "block": "isWhitelisted",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "215": {
      "op": "frame_dig -1",
      "defined_out": [
        "appId#0 (copy)"
      ],
      "stack_out": [
        "appId#0 (copy)"
      ]
    },
    "217": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "218": {
      "op": "bytec_1 // \"whitelist\"",
      "defined_out": [
        "\"whitelist\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"whitelist\""
      ]
    },
    "219": {
      "op": "swap",
      "stack_out": [
        "\"whitelist\"",
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "221": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "222": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "224": {
      "retsub": true,
      "op": "retsub"
    }
  }
}