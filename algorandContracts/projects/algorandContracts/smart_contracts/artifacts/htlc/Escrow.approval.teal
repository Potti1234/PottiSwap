#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 121 8
    bytecblock "escrowInstances" 0x151f7c75 "escrowInstancesAmount"
    // smart_contracts/htlc/contract.algo.ts:14
    // export class Escrow extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0xdeb6f0e6 0xa7dba54a 0x772b39ba 0xdee13de1 0x64ccd930 // method "create(uint64,byte[32],address,pay)uint64", method "withdraw(byte[32],uint64)void", method "cancel(uint64)void", method "makeHash(byte[32])byte[]", method "latestTimestamp()uint64"
    txna ApplicationArgs 0
    match main_create_route@3 main_withdraw_route@4 main_cancel_route@5 main_makeHash_route@6 main_latestTimestamp_route@7

main_after_if_else@14:
    // smart_contracts/htlc/contract.algo.ts:14
    // export class Escrow extends Contract {
    intc_1 // 0
    return

main_latestTimestamp_route@7:
    // smart_contracts/htlc/contract.algo.ts:104
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub latestTimestamp
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_makeHash_route@6:
    // smart_contracts/htlc/contract.algo.ts:95
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/contract.algo.ts:14
    // export class Escrow extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/htlc/contract.algo.ts:95
    // @arc4.abimethod({ readonly: true })
    callsub makeHash
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_cancel_route@5:
    // smart_contracts/htlc/contract.algo.ts:66
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/contract.algo.ts:14
    // export class Escrow extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/htlc/contract.algo.ts:66
    // @arc4.abimethod()
    callsub cancel
    intc_0 // 1
    return

main_withdraw_route@4:
    // smart_contracts/htlc/contract.algo.ts:50
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/contract.algo.ts:14
    // export class Escrow extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // smart_contracts/htlc/contract.algo.ts:50
    // @arc4.abimethod()
    callsub withdraw
    intc_0 // 1
    return

main_create_route@3:
    // smart_contracts/htlc/contract.algo.ts:26
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/contract.algo.ts:14
    // export class Escrow extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/htlc/contract.algo.ts:26
    // @arc4.abimethod()
    callsub create
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@10:
    // smart_contracts/htlc/contract.algo.ts:14
    // export class Escrow extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/htlc/contract.algo.ts::Escrow.create(timelock: uint64, secretHash: bytes, taker: bytes, txnDeposit: uint64) -> uint64:
create:
    // smart_contracts/htlc/contract.algo.ts:26-27
    // @arc4.abimethod()
    // public create(timelock: uint64, secretHash: arc4.StaticBytes<32>, taker: Address, txnDeposit: gtxn.PaymentTxn): uint64 {
    proto 4 1
    // smart_contracts/htlc/contract.algo.ts:29
    // createdTime: this.latestTimestamp(),
    callsub latestTimestamp
    // smart_contracts/htlc/contract.algo.ts:30
    // rescueTime: Global.latestTimestamp + timelock,
    global LatestTimestamp
    frame_dig -4
    +
    // smart_contracts/htlc/contract.algo.ts:31
    // amount: txnDeposit.amount,
    frame_dig -1
    gtxns Amount
    // smart_contracts/htlc/contract.algo.ts:32
    // creator: new Address(txnDeposit.sender),
    frame_dig -1
    gtxns Sender
    // smart_contracts/htlc/contract.algo.ts:15
    // public escrowInstances = GlobalState<EscrowInstance[]>();
    intc_1 // 0
    bytec_0 // "escrowInstances"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/contract.algo.ts:38
    // this.escrowInstances.value = [...this.escrowInstances.value, newEscrowInstance];
    extract 2 0
    // smart_contracts/htlc/contract.algo.ts:28
    // const newEscrowInstance: EscrowInstance = {
    uncover 4
    itob
    uncover 4
    itob
    concat
    uncover 3
    itob
    concat
    uncover 2
    concat
    frame_dig -2
    concat
    frame_dig -3
    concat
    pushbytes 0x80
    concat
    // smart_contracts/htlc/contract.algo.ts:38
    // this.escrowInstances.value = [...this.escrowInstances.value, newEscrowInstance];
    dup
    len
    intc_2 // 121
    /
    itob
    extract 6 2
    swap
    concat
    extract 2 0
    concat
    dup
    len
    intc_2 // 121
    /
    itob
    extract 6 2
    swap
    concat
    // smart_contracts/htlc/contract.algo.ts:15
    // public escrowInstances = GlobalState<EscrowInstance[]>();
    bytec_0 // "escrowInstances"
    // smart_contracts/htlc/contract.algo.ts:38
    // this.escrowInstances.value = [...this.escrowInstances.value, newEscrowInstance];
    swap
    app_global_put
    // smart_contracts/htlc/contract.algo.ts:16
    // public escrowInstancesAmount = GlobalState<uint64>();
    intc_1 // 0
    bytec_2 // "escrowInstancesAmount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/contract.algo.ts:40
    // this.escrowInstancesAmount.value++;
    intc_0 // 1
    +
    // smart_contracts/htlc/contract.algo.ts:16
    // public escrowInstancesAmount = GlobalState<uint64>();
    bytec_2 // "escrowInstancesAmount"
    // smart_contracts/htlc/contract.algo.ts:40
    // this.escrowInstancesAmount.value++;
    swap
    app_global_put
    // smart_contracts/htlc/contract.algo.ts:16
    // public escrowInstancesAmount = GlobalState<uint64>();
    intc_1 // 0
    bytec_2 // "escrowInstancesAmount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/contract.algo.ts:42
    // return this.escrowInstancesAmount.value;
    retsub


// smart_contracts/htlc/contract.algo.ts::Escrow.withdraw(secret: bytes, escrowId: uint64) -> void:
withdraw:
    // smart_contracts/htlc/contract.algo.ts:50-51
    // @arc4.abimethod()
    // public withdraw(secret: arc4.StaticBytes<32>, escrowId: uint64) {
    proto 2 0
    // smart_contracts/htlc/contract.algo.ts:15
    // public escrowInstances = GlobalState<EscrowInstance[]>();
    intc_1 // 0
    bytec_0 // "escrowInstances"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/contract.algo.ts:52
    // const escrowInstance = this.escrowInstances.value[escrowId];
    extract 2 0
    frame_dig -1
    intc_2 // 121
    *
    intc_2 // 121
    extract3 // on error: Index access is out of bounds
    dup
    intc_3 // 8
    extract_uint64
    dig 1
    pushint 16 // 16
    extract_uint64
    dig 2
    extract 56 32 // on error: Index access is out of bounds
    uncover 3
    extract 88 32 // on error: Index access is out of bounds
    // smart_contracts/htlc/contract.algo.ts:54
    // assert(this.makeHash(secret) === escrowInstance.secretHash.bytes, "The password is not correct");
    frame_dig -2
    callsub makeHash
    ==
    assert // The password is not correct
    // smart_contracts/htlc/contract.algo.ts:56
    // assert(this.latestTimestamp() < escrowInstance.rescueTime, "Escrow can be redeemed with password up to the rescue time");
    callsub latestTimestamp
    uncover 3
    <
    assert // Escrow can be redeemed with password up to the rescue time
    // smart_contracts/htlc/contract.algo.ts:59
    // this._send(escrowInstance.taker, escrowInstance.amount);
    swap
    callsub _send
    retsub


// smart_contracts/htlc/contract.algo.ts::Escrow.cancel(escrowId: uint64) -> void:
cancel:
    // smart_contracts/htlc/contract.algo.ts:66-67
    // @arc4.abimethod()
    // public cancel(escrowId: uint64) {
    proto 1 0
    // smart_contracts/htlc/contract.algo.ts:15
    // public escrowInstances = GlobalState<EscrowInstance[]>();
    intc_1 // 0
    bytec_0 // "escrowInstances"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/contract.algo.ts:68
    // const escrowInstance = this.escrowInstances.value[escrowId];
    extract 2 0
    frame_dig -1
    intc_2 // 121
    *
    intc_2 // 121
    extract3 // on error: Index access is out of bounds
    dup
    intc_3 // 8
    extract_uint64
    dig 1
    pushint 16 // 16
    extract_uint64
    uncover 2
    extract 24 32 // on error: Index access is out of bounds
    // smart_contracts/htlc/contract.algo.ts:70
    // assert(this.latestTimestamp() > escrowInstance.rescueTime, "The escrow cannot be canceled yet");
    callsub latestTimestamp
    uncover 3
    >
    assert // The escrow cannot be canceled yet
    // smart_contracts/htlc/contract.algo.ts:73
    // this._send(escrowInstance.creator, escrowInstance.amount);
    swap
    callsub _send
    retsub


// smart_contracts/htlc/contract.algo.ts::Escrow._send(receiver: bytes, amount: uint64) -> void:
_send:
    // smart_contracts/htlc/contract.algo.ts:79
    // private _send(receiver: Address, amount: uint64): void {
    proto 2 0
    // smart_contracts/htlc/contract.algo.ts:80-86
    // itxn
    //   .payment({
    //     amount: amount,
    //     fee: Global.minTxnFee,
    //     receiver: receiver.bytes,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/htlc/contract.algo.ts:83
    // fee: Global.minTxnFee,
    global MinTxnFee
    frame_dig -2
    itxn_field Receiver
    frame_dig -1
    itxn_field Amount
    // smart_contracts/htlc/contract.algo.ts:80-85
    // itxn
    //   .payment({
    //     amount: amount,
    //     fee: Global.minTxnFee,
    //     receiver: receiver.bytes,
    //   })
    intc_0 // 1
    itxn_field TypeEnum
    itxn_field Fee
    // smart_contracts/htlc/contract.algo.ts:80-86
    // itxn
    //   .payment({
    //     amount: amount,
    //     fee: Global.minTxnFee,
    //     receiver: receiver.bytes,
    //   })
    //   .submit();
    itxn_submit
    retsub


// smart_contracts/htlc/contract.algo.ts::Escrow.makeHash(secret: bytes) -> bytes:
makeHash:
    // smart_contracts/htlc/contract.algo.ts:95-96
    // @arc4.abimethod({ readonly: true })
    // public makeHash(secret: arc4.StaticBytes<32>): bytes {
    proto 1 1
    // smart_contracts/htlc/contract.algo.ts:97
    // return op.keccak256(secret.bytes);
    frame_dig -1
    keccak256
    retsub


// smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp() -> uint64:
latestTimestamp:
    // smart_contracts/htlc/contract.algo.ts:106
    // return Global.latestTimestamp;
    global LatestTimestamp
    retsub
