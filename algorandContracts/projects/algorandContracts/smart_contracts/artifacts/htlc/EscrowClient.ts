/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Escrow","structs":{},"methods":[{"name":"create","args":[{"type":"uint64","name":"timelock","desc":"The number seconds from the current time after the Escrow can be returned to the creator"},{"type":"byte[32]","name":"secretHash","desc":"Hash of the secret in keccak256"},{"type":"address","name":"taker","desc":"Creator of the escrow (Factory) can set taker address to the resolver address after it is know who won the auction"},{"type":"address","name":"creator","desc":"Original creator of the escrow who called the factory"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"byte[32]","name":"secret","desc":"Secret"},{"type":"uint64","name":"escrowId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw from escrow with known secret","events":[],"recommendations":{}},{"name":"cancel","args":[{"type":"uint64","name":"escrowId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"After timelock runs out refund to original sender","events":[],"recommendations":{}},{"name":"makeHash","args":[{"type":"byte[32]","name":"secret","desc":"The secret"}],"returns":{"type":"byte[]","desc":"Hash of the secret"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Return hash of the secret.","events":[],"recommendations":{}},{"name":"latestTimestamp","args":[],"returns":{"type":"uint64","desc":"Current time of the blockchain"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get current time","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"escrowInstances":{"keyType":"AVMString","valueType":"(uint64,uint64,uint64,address,address,byte[32],bool)[]","key":"ZXNjcm93SW5zdGFuY2Vz"},"escrowInstancesAmount":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZXNjcm93SW5zdGFuY2VzQW1vdW50"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[360],"errorMessage":"Escrow can be redeemed with password up to the rescue time"},{"pc":[328,339,344,381,392],"errorMessage":"Index access is out of bounds"},{"pc":[104,121,148,164,183],"errorMessage":"OnCompletion is not NoOp"},{"pc":[401],"errorMessage":"The escrow cannot be canceled yet"},{"pc":[353],"errorMessage":"The password is not correct"},{"pc":[218],"errorMessage":"can only call when creating"},{"pc":[107,124,151,167,186],"errorMessage":"can only call when not creating"},{"pc":[244,302,311,319,372],"errorMessage":"check GlobalState exists"},{"pc":[229],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAQB5CCYDD2VzY3Jvd0luc3RhbmNlcwQVH3x1FWVzY3Jvd0luc3RhbmNlc0Ftb3VudDEbQQCZggUENbCQQQSn26VKBHcrOboE3uE94QRkzNkwNhoAjgUAUQA+AC4AEwACI0MxGRREMRhEiAFEFilMULAiQzEZFEQxGEQ2GgGIASlJFRZXBgJMUClMULAiQzEZFEQxGEQ2GgEXiADPIkMxGRREMRhENhoBNhoCF4gAhyJDMRkURDEYRDYaARc2GgI2GgM2GgSIABIWKUxQsCJDMRlA/4wxGBREIkOKBAEjOBAiEkSIAMoyB4v8CCM4CCMoZURXAgBPAxZPAxZQTwIWUIv/UIv+UIv9UIABgFBJFSQKFlcGAkxQVwIAUEkVJAoWVwYCTFAoTGcjKmVEIggqTGcjKmVEiYoCACMoZURXAgCL/yQLJFhJJVtLAYEQW0sCVzggTwNXWCCL/ogATBJEiABOTwMMREyIACqJigEAIyhlRFcCAIv/JAskWEklW0sBgRBbTwJXGCCIACVPAw1ETIgAAYmKAgCxMgCL/rIHi/+yCCKyELIBs4mKAQGL/wKJMgeJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Escrow contract
 */
export type EscrowArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(uint64,byte[32],address,address)uint64': {
      /**
       * The number seconds from the current time after the Escrow can be returned to the creator
       */
      timelock: bigint | number
      /**
       * Hash of the secret in keccak256
       */
      secretHash: Uint8Array
      /**
       * Creator of the escrow (Factory) can set taker address to the resolver address after it is know who won the auction
       */
      taker: string
      /**
       * Original creator of the escrow who called the factory
       */
      creator: string
    }
    'withdraw(byte[32],uint64)void': {
      /**
       * Secret
       */
      secret: Uint8Array
      escrowId: bigint | number
    }
    'cancel(uint64)void': {
      escrowId: bigint | number
    }
    'makeHash(byte[32])byte[]': {
      /**
       * The secret
       */
      secret: Uint8Array
    }
    'latestTimestamp()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(uint64,byte[32],address,address)uint64': [timelock: bigint | number, secretHash: Uint8Array, taker: string, creator: string]
    'withdraw(byte[32],uint64)void': [secret: Uint8Array, escrowId: bigint | number]
    'cancel(uint64)void': [escrowId: bigint | number]
    'makeHash(byte[32])byte[]': [secret: Uint8Array]
    'latestTimestamp()uint64': []
  }
}

/**
 * The return type for each method
 */
export type EscrowReturns = {
  'create(uint64,byte[32],address,address)uint64': bigint
  'withdraw(byte[32],uint64)void': void
  'cancel(uint64)void': void
  'makeHash(byte[32])byte[]': Uint8Array
  'latestTimestamp()uint64': bigint
}

/**
 * Defines the types of available calls and state of the Escrow smart contract.
 */
export type EscrowTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(uint64,byte[32],address,address)uint64' | 'create', {
      argsObj: EscrowArgs['obj']['create(uint64,byte[32],address,address)uint64']
      argsTuple: EscrowArgs['tuple']['create(uint64,byte[32],address,address)uint64']
      returns: EscrowReturns['create(uint64,byte[32],address,address)uint64']
    }>
    & Record<'withdraw(byte[32],uint64)void' | 'withdraw', {
      argsObj: EscrowArgs['obj']['withdraw(byte[32],uint64)void']
      argsTuple: EscrowArgs['tuple']['withdraw(byte[32],uint64)void']
      returns: EscrowReturns['withdraw(byte[32],uint64)void']
    }>
    & Record<'cancel(uint64)void' | 'cancel', {
      argsObj: EscrowArgs['obj']['cancel(uint64)void']
      argsTuple: EscrowArgs['tuple']['cancel(uint64)void']
      returns: EscrowReturns['cancel(uint64)void']
    }>
    & Record<'makeHash(byte[32])byte[]' | 'makeHash', {
      argsObj: EscrowArgs['obj']['makeHash(byte[32])byte[]']
      argsTuple: EscrowArgs['tuple']['makeHash(byte[32])byte[]']
      /**
       * Hash of the secret
       */
      returns: EscrowReturns['makeHash(byte[32])byte[]']
    }>
    & Record<'latestTimestamp()uint64' | 'latestTimestamp', {
      argsObj: EscrowArgs['obj']['latestTimestamp()uint64']
      argsTuple: EscrowArgs['tuple']['latestTimestamp()uint64']
      /**
       * Current time of the blockchain
       */
      returns: EscrowReturns['latestTimestamp()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        escrowInstances: [bigint, bigint, bigint, string, string, Uint8Array, boolean][]
        escrowInstancesAmount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EscrowSignatures = keyof EscrowTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EscrowNonVoidMethodSignatures = keyof EscrowTypes['methods'] extends infer T ? T extends keyof EscrowTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Escrow smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EscrowSignatures> = EscrowTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Escrow smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EscrowSignatures> = EscrowTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = EscrowTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EscrowCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EscrowDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EscrowCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Escrow smart contract
 */
export abstract class EscrowParamsFactory {
  /**
   * Constructs a no op call for the create(uint64,byte[32],address,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static create(params: CallParams<EscrowArgs['obj']['create(uint64,byte[32],address,address)uint64'] | EscrowArgs['tuple']['create(uint64,byte[32],address,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create(uint64,byte[32],address,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.timelock, params.args.secretHash, params.args.taker, params.args.creator],
    }
  }
  /**
   * Constructs a no op call for the withdraw(byte[32],uint64)void ABI method
   *
   * Withdraw from escrow with known secret
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<EscrowArgs['obj']['withdraw(byte[32],uint64)void'] | EscrowArgs['tuple']['withdraw(byte[32],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(byte[32],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.secret, params.args.escrowId],
    }
  }
  /**
   * Constructs a no op call for the cancel(uint64)void ABI method
   *
   * After timelock runs out refund to original sender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancel(params: CallParams<EscrowArgs['obj']['cancel(uint64)void'] | EscrowArgs['tuple']['cancel(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancel(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.escrowId],
    }
  }
  /**
   * Constructs a no op call for the makeHash(byte[32])byte[] ABI method
   *
   * Return hash of the secret.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeHash(params: CallParams<EscrowArgs['obj']['makeHash(byte[32])byte[]'] | EscrowArgs['tuple']['makeHash(byte[32])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeHash(byte[32])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.secret],
    }
  }
  /**
   * Constructs a no op call for the latestTimestamp()uint64 ABI method
   *
   * Get current time
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static latestTimestamp(params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'latestTimestamp()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Escrow smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EscrowFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EscrowFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EscrowClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EscrowClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Escrow smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EscrowDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new EscrowClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new EscrowClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Escrow smart contract
 */
export class EscrowClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EscrowClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Escrow app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EscrowClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EscrowNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EscrowClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EscrowClient> {
    return new EscrowClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EscrowClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EscrowClient> {
    return new EscrowClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `create(uint64,byte[32],address,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    create: (params: CallParams<EscrowArgs['obj']['create(uint64,byte[32],address,address)uint64'] | EscrowArgs['tuple']['create(uint64,byte[32],address,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.create(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `withdraw(byte[32],uint64)void` ABI method.
     *
     * Withdraw from escrow with known secret
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<EscrowArgs['obj']['withdraw(byte[32],uint64)void'] | EscrowArgs['tuple']['withdraw(byte[32],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `cancel(uint64)void` ABI method.
     *
     * After timelock runs out refund to original sender
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancel: (params: CallParams<EscrowArgs['obj']['cancel(uint64)void'] | EscrowArgs['tuple']['cancel(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.cancel(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `makeHash(byte[32])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return hash of the secret.
     *
     * @param params The params for the smart contract call
     * @returns The call params: Hash of the secret
     */
    makeHash: (params: CallParams<EscrowArgs['obj']['makeHash(byte[32])byte[]'] | EscrowArgs['tuple']['makeHash(byte[32])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.makeHash(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call params: Current time of the blockchain
     */
    latestTimestamp: (params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowParamsFactory.latestTimestamp(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `create(uint64,byte[32],address,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    create: (params: CallParams<EscrowArgs['obj']['create(uint64,byte[32],address,address)uint64'] | EscrowArgs['tuple']['create(uint64,byte[32],address,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.create(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `withdraw(byte[32],uint64)void` ABI method.
     *
     * Withdraw from escrow with known secret
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<EscrowArgs['obj']['withdraw(byte[32],uint64)void'] | EscrowArgs['tuple']['withdraw(byte[32],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `cancel(uint64)void` ABI method.
     *
     * After timelock runs out refund to original sender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancel: (params: CallParams<EscrowArgs['obj']['cancel(uint64)void'] | EscrowArgs['tuple']['cancel(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.cancel(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `makeHash(byte[32])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return hash of the secret.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Hash of the secret
     */
    makeHash: (params: CallParams<EscrowArgs['obj']['makeHash(byte[32])byte[]'] | EscrowArgs['tuple']['makeHash(byte[32])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.makeHash(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Current time of the blockchain
     */
    latestTimestamp: (params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.latestTimestamp(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `create(uint64,byte[32],address,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    create: async (params: CallParams<EscrowArgs['obj']['create(uint64,byte[32],address,address)uint64'] | EscrowArgs['tuple']['create(uint64,byte[32],address,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.create(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['create(uint64,byte[32],address,address)uint64'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `withdraw(byte[32],uint64)void` ABI method.
     *
     * Withdraw from escrow with known secret
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<EscrowArgs['obj']['withdraw(byte[32],uint64)void'] | EscrowArgs['tuple']['withdraw(byte[32],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['withdraw(byte[32],uint64)void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `cancel(uint64)void` ABI method.
     *
     * After timelock runs out refund to original sender
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancel: async (params: CallParams<EscrowArgs['obj']['cancel(uint64)void'] | EscrowArgs['tuple']['cancel(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.cancel(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['cancel(uint64)void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `makeHash(byte[32])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return hash of the secret.
     *
     * @param params The params for the smart contract call
     * @returns The call result: Hash of the secret
     */
    makeHash: async (params: CallParams<EscrowArgs['obj']['makeHash(byte[32])byte[]'] | EscrowArgs['tuple']['makeHash(byte[32])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.makeHash(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['makeHash(byte[32])byte[]'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call result: Current time of the blockchain
     */
    latestTimestamp: async (params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.latestTimestamp(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['latestTimestamp()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EscrowClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Escrow smart contract using the `makeHash(byte[32])byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Return hash of the secret.
   *
   * @param params The params for the smart contract call
   * @returns The call result: Hash of the secret
   */
  async makeHash(params: CallParams<EscrowArgs['obj']['makeHash(byte[32])byte[]'] | EscrowArgs['tuple']['makeHash(byte[32])byte[]']>) {
    const result = await this.appClient.send.call(EscrowParamsFactory.makeHash(params))
    return result.return as unknown as EscrowReturns['makeHash(byte[32])byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the Escrow smart contract using the `latestTimestamp()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get current time
   *
   * @param params The params for the smart contract call
   * @returns The call result: Current time of the blockchain
   */
  async latestTimestamp(params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(EscrowParamsFactory.latestTimestamp(params))
    return result.return as unknown as EscrowReturns['latestTimestamp()uint64']
  }

  /**
   * Methods to access state for the current Escrow app
   */
  state = {
    /**
     * Methods to access global state for the current Escrow app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          escrowInstances: result.escrowInstances,
          escrowInstancesAmount: result.escrowInstancesAmount,
        }
      },
      /**
       * Get the current value of the escrowInstances key in global state
       */
      escrowInstances: async (): Promise<[bigint, bigint, bigint, string, string, Uint8Array, boolean][] | undefined> => { return (await this.appClient.state.global.getValue("escrowInstances")) as [bigint, bigint, bigint, string, string, Uint8Array, boolean][] | undefined },
      /**
       * Get the current value of the escrowInstancesAmount key in global state
       */
      escrowInstancesAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("escrowInstancesAmount")) as bigint | undefined },
    },
  }

  public newGroup(): EscrowComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create(uint64,byte[32],address,address)uint64 method call against the Escrow contract
       */
      create(params: CallParams<EscrowArgs['obj']['create(uint64,byte[32],address,address)uint64'] | EscrowArgs['tuple']['create(uint64,byte[32],address,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.create(params)))
        resultMappers.push((v) => client.decodeReturnValue('create(uint64,byte[32],address,address)uint64', v))
        return this
      },
      /**
       * Add a withdraw(byte[32],uint64)void method call against the Escrow contract
       */
      withdraw(params: CallParams<EscrowArgs['obj']['withdraw(byte[32],uint64)void'] | EscrowArgs['tuple']['withdraw(byte[32],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cancel(uint64)void method call against the Escrow contract
       */
      cancel(params: CallParams<EscrowArgs['obj']['cancel(uint64)void'] | EscrowArgs['tuple']['cancel(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancel(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeHash(byte[32])byte[] method call against the Escrow contract
       */
      makeHash(params: CallParams<EscrowArgs['obj']['makeHash(byte[32])byte[]'] | EscrowArgs['tuple']['makeHash(byte[32])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeHash(params)))
        resultMappers.push((v) => client.decodeReturnValue('makeHash(byte[32])byte[]', v))
        return this
      },
      /**
       * Add a latestTimestamp()uint64 method call against the Escrow contract
       */
      latestTimestamp(params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.latestTimestamp(params)))
        resultMappers.push((v) => client.decodeReturnValue('latestTimestamp()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the Escrow contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EscrowComposer
  }
}
export type EscrowComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create(uint64,byte[32],address,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(params?: CallParams<EscrowArgs['obj']['create(uint64,byte[32],address,address)uint64'] | EscrowArgs['tuple']['create(uint64,byte[32],address,address)uint64']>): EscrowComposer<[...TReturns, EscrowReturns['create(uint64,byte[32],address,address)uint64'] | undefined]>

  /**
   * Calls the withdraw(byte[32],uint64)void ABI method.
   *
   * Withdraw from escrow with known secret
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<EscrowArgs['obj']['withdraw(byte[32],uint64)void'] | EscrowArgs['tuple']['withdraw(byte[32],uint64)void']>): EscrowComposer<[...TReturns, EscrowReturns['withdraw(byte[32],uint64)void'] | undefined]>

  /**
   * Calls the cancel(uint64)void ABI method.
   *
   * After timelock runs out refund to original sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancel(params?: CallParams<EscrowArgs['obj']['cancel(uint64)void'] | EscrowArgs['tuple']['cancel(uint64)void']>): EscrowComposer<[...TReturns, EscrowReturns['cancel(uint64)void'] | undefined]>

  /**
   * Calls the makeHash(byte[32])byte[] ABI method.
   *
   * Return hash of the secret.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeHash(params?: CallParams<EscrowArgs['obj']['makeHash(byte[32])byte[]'] | EscrowArgs['tuple']['makeHash(byte[32])byte[]']>): EscrowComposer<[...TReturns, EscrowReturns['makeHash(byte[32])byte[]'] | undefined]>

  /**
   * Calls the latestTimestamp()uint64 ABI method.
   *
   * Get current time
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  latestTimestamp(params?: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']>): EscrowComposer<[...TReturns, EscrowReturns['latestTimestamp()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Escrow smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EscrowComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EscrowComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EscrowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EscrowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EscrowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EscrowComposerResults<TReturns>>
}
export type EscrowComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

