{
    "name": "Resolver",
    "structs": {},
    "methods": [
        {
            "name": "createResolver",
            "args": [
                {
                    "type": "uint64",
                    "name": "factoryAppId",
                    "desc": "App ID of the factory contract"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deployEscrow",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit"
                },
                {
                    "type": "uint64",
                    "name": "timelock"
                },
                {
                    "type": "byte[32]",
                    "name": "secretHash"
                },
                {
                    "type": "address",
                    "name": "taker"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claimEscrow",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secret"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "factoryAppId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZmFjdG9yeUFwcElk"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        59,
                        74,
                        116
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        137
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        62,
                        77,
                        119
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        154,
                        189
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        87
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAQAGJgEMZmFjdG9yeUFwcElkMRtBAGeCAwQWg6T8BMgvYgMErFzReDYaAI4DADsAEQACI0MxGRREMRhENhoBiAByIkMxGRREMRhEMRYiCUk4ECISRDYaARc2GgI2GgOIAC8WgAQVH3x1TFCwIkMxGRREMRhENhoBF4gADSJDMRlA/7AxGBREIkOKAQAoi/9niYoEASMoZUSxMgCL/RayGov+shqL/7IaTLIYJLIQsgGztBiJigEAIyhlRLEyAIv/shpMshgkshCyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}