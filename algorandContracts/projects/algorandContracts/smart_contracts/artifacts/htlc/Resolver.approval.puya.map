{
  "version": 3,
  "sources": [
    "/home/lukas/CodingProjects/PottiSwap/algorandContracts/projects/algorandContracts/smart_contracts/htlc/resolver.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAgBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA2BG;;AAAA;AAAA;AAAA;;AAAA;AA3BH;;;AA2BG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAbH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAaG;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AARH;;;AAAA;AAQG;;;AAAA;;AARH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAQE;;;AAPO;AASL;;AAAA;;AAGF;;;AAZO;AAAA;AAAA;AAAA;AAee;AAIJ;;AADF;;AAAA;;;;;;;;;;;;;;AAHM;;;;;AAAA;;;AAQpB;AAGF;;;AA1BO;AAAA;AAAA;AAAA;AA8BL;AAIgB;;;;;;;;;AAJhB;;;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 6"
    },
    "6": {
      "op": "bytecblock \"factoryAppId\""
    },
    "21": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "23": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "26": {
      "op": "pushbytess 0x1683a4fc 0xc82f6203 0xac5cd178 // method \"createResolver(uint64)void\", method \"deployEscrow(pay,uint64,byte[32],address)uint64\", method \"claimEscrow(byte[32])void\"",
      "defined_out": [
        "Method(claimEscrow(byte[32])void)",
        "Method(createResolver(uint64)void)",
        "Method(deployEscrow(pay,uint64,byte[32],address)uint64)"
      ],
      "stack_out": [
        "Method(createResolver(uint64)void)",
        "Method(deployEscrow(pay,uint64,byte[32],address)uint64)",
        "Method(claimEscrow(byte[32])void)"
      ]
    },
    "43": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(claimEscrow(byte[32])void)",
        "Method(createResolver(uint64)void)",
        "Method(deployEscrow(pay,uint64,byte[32],address)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createResolver(uint64)void)",
        "Method(deployEscrow(pay,uint64,byte[32],address)uint64)",
        "Method(claimEscrow(byte[32])void)",
        "tmp%2#0"
      ]
    },
    "46": {
      "op": "match main_createResolver_route@3 main_deployEscrow_route@4 main_claimEscrow_route@5",
      "stack_out": []
    },
    "54": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "55": {
      "op": "return",
      "stack_out": []
    },
    "56": {
      "block": "main_claimEscrow_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "58": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "59": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "60": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "62": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "63": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "66": {
      "callsub": "smart_contracts/htlc/resolver.algo.ts::Resolver.claimEscrow",
      "op": "callsub claimEscrow",
      "stack_out": []
    },
    "69": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "return",
      "stack_out": []
    },
    "71": {
      "block": "main_deployEscrow_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "73": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "74": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "75": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "77": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "78": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "80": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "1"
      ]
    },
    "81": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "82": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "83": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "85": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "86": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "87": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "88": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "91": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0"
      ]
    },
    "92": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "95": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "98": {
      "callsub": "smart_contracts/htlc/resolver.algo.ts::Resolver.deployEscrow",
      "op": "callsub deployEscrow",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "101": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "102": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "108": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "109": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "110": {
      "op": "log",
      "stack_out": []
    },
    "111": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "112": {
      "op": "return",
      "stack_out": []
    },
    "113": {
      "block": "main_createResolver_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "115": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "116": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "117": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "119": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "120": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "123": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "124": {
      "callsub": "smart_contracts/htlc/resolver.algo.ts::Resolver.createResolver",
      "op": "callsub createResolver",
      "stack_out": []
    },
    "127": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "128": {
      "op": "return",
      "stack_out": []
    },
    "129": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "131": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "136": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "137": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "138": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "subroutine": "smart_contracts/htlc/resolver.algo.ts::Resolver.createResolver",
      "params": {
        "factoryAppId#0": "uint64"
      },
      "block": "createResolver",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "143": {
      "op": "bytec_0 // \"factoryAppId\"",
      "defined_out": [
        "\"factoryAppId\""
      ],
      "stack_out": [
        "\"factoryAppId\""
      ]
    },
    "144": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"factoryAppId\"",
        "factoryAppId#0 (copy)"
      ],
      "stack_out": [
        "\"factoryAppId\"",
        "factoryAppId#0 (copy)"
      ]
    },
    "146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "147": {
      "retsub": true,
      "op": "retsub"
    },
    "148": {
      "subroutine": "smart_contracts/htlc/resolver.algo.ts::Resolver.deployEscrow",
      "params": {
        "txnDeposit#0": "uint64",
        "timelock#0": "uint64",
        "secretHash#0": "bytes",
        "taker#0": "bytes"
      },
      "block": "deployEscrow",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "151": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "152": {
      "op": "bytec_0 // \"factoryAppId\"",
      "defined_out": [
        "\"factoryAppId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"factoryAppId\""
      ]
    },
    "153": {
      "op": "app_global_get_ex",
      "defined_out": [
        "factoryAppId#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "factoryAppId#0",
        "maybe_exists%0#0"
      ]
    },
    "154": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "factoryAppId#0"
      ]
    },
    "155": {
      "op": "itxn_begin"
    },
    "156": {
      "op": "global MinTxnFee",
      "defined_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "158": {
      "op": "frame_dig -3",
      "defined_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "timelock#0 (copy)"
      ],
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "timelock#0 (copy)"
      ]
    },
    "160": {
      "op": "itob",
      "defined_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "163": {
      "op": "frame_dig -2",
      "defined_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "secretHash#0 (copy)"
      ]
    },
    "165": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "167": {
      "op": "frame_dig -1",
      "defined_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "taker#0 (copy)"
      ],
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "taker#0 (copy)"
      ]
    },
    "169": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "factoryAppId#0"
      ]
    },
    "172": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "174": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "6"
      ]
    },
    "175": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "177": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "179": {
      "op": "itxn_submit"
    },
    "180": {
      "op": "itxn ApplicationID",
      "defined_out": [
        "escrowAppId.ApplicationID#0"
      ],
      "stack_out": [
        "escrowAppId.ApplicationID#0"
      ]
    },
    "182": {
      "retsub": true,
      "op": "retsub"
    },
    "183": {
      "subroutine": "smart_contracts/htlc/resolver.algo.ts::Resolver.claimEscrow",
      "params": {
        "secret#0": "bytes"
      },
      "block": "claimEscrow",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "186": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "187": {
      "op": "bytec_0 // \"factoryAppId\"",
      "defined_out": [
        "\"factoryAppId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"factoryAppId\""
      ]
    },
    "188": {
      "op": "app_global_get_ex",
      "defined_out": [
        "factoryAppId#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "factoryAppId#0",
        "maybe_exists%0#0"
      ]
    },
    "189": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "factoryAppId#0"
      ]
    },
    "190": {
      "op": "itxn_begin"
    },
    "191": {
      "op": "global MinTxnFee",
      "defined_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "193": {
      "op": "frame_dig -1",
      "defined_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "secret#0 (copy)"
      ],
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "secret#0 (copy)"
      ]
    },
    "195": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "factoryAppId#0",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "197": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "factoryAppId#0"
      ]
    },
    "198": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "200": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "6"
      ]
    },
    "201": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "203": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "205": {
      "op": "itxn_submit"
    },
    "206": {
      "retsub": true,
      "op": "retsub"
    }
  }
}