{
    "name": "Escrow",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "The deposit transaction of the asset"
                },
                {
                    "type": "uint64",
                    "name": "timelock",
                    "desc": "The number seconds from the current time after the Escrow can be returned to the creator"
                },
                {
                    "type": "byte[32]",
                    "name": "secretHash",
                    "desc": "Hash of the secret in keccak256"
                },
                {
                    "type": "address",
                    "name": "taker",
                    "desc": "Creator of the escrow (Factory) can set taker address to the resolver address after it is know who won the auction"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secret",
                    "desc": "Secret"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw from escrow with known secret",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cancel",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "After timelock runs out refund to original sender",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "makeHash",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secret",
                    "desc": "The secret"
                }
            ],
            "returns": {
                "type": "byte[]",
                "desc": "Hash of the secret"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Return hash of the secret.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "latestTimestamp",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Current time of the blockchain"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current time",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "createdTime": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3JlYXRlZFRpbWU="
                },
                "rescueTime": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmVzY3VlVGltZQ=="
                },
                "amount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YW1vdW50"
                },
                "creator": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y3JlYXRvcg=="
                },
                "taker": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "dGFrZXI="
                },
                "secretHash": {
                    "keyType": "AVMString",
                    "valueType": "byte[32]",
                    "key": "c2VjcmV0SGFzaA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        248
                    ],
                    "errorMessage": "Deposit should be positive number"
                },
                {
                    "pc": [
                        312
                    ],
                    "errorMessage": "Escrow can be redeemed with password up to the rescue time"
                },
                {
                    "pc": [
                        107,
                        124,
                        151,
                        163,
                        178
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        228
                    ],
                    "errorMessage": "Receiver must be the escrow app"
                },
                {
                    "pc": [
                        236
                    ],
                    "errorMessage": "Sender of deposit must be the same as the sender of the app call"
                },
                {
                    "pc": [
                        334
                    ],
                    "errorMessage": "The escrow cannot be canceled yet"
                },
                {
                    "pc": [
                        303
                    ],
                    "errorMessage": "The password is not correct"
                },
                {
                    "pc": [
                        215
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        110,
                        127,
                        154,
                        166,
                        181
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        247,
                        301,
                        310,
                        317,
                        321,
                        329,
                        339,
                        343
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBgZhbW91bnQKcmVzY3VlVGltZQQVH3x1CnNlY3JldEhhc2gFdGFrZXIHY3JlYXRvcjEbQQCTggUECSP9EwQBDowPBDHyapsE3uE94QRkzNkwNhoAjgUASQA6AC4AEwACIkMxGRREMRhEiAEGFipMULAjQzEZFEQxGEQ2GgGIAOtJFRZXBgJMUCpMULAjQzEZFEQxGESIAKgjQzEZFEQxGEQ2GgGIAHUjQzEZFEQxGEQxFiMJSTgQIxJENhoBFzYaAjYaA4gADSNDMRlA/5IxGBREI0OKBACL/DgHMgoSRIv8OAAxABJEi/w4CChMZyIoZUREiAB8gAtjcmVhdGVkVGltZUxnMgeL/QgpTGcri/5nJwSL/2cnBTEAZ4mKAQCL/4gARyIrZUQSRIgARSIpZUQMRCInBGVEIihlRIgAF4kiKWVEiAArDEQiJwVlRCIoZUSIAAGJigIAsTIAi/6yB4v/sggjshCyAbOJigEBi/8CiTIHiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}