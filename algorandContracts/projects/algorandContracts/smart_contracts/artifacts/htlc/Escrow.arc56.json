{
    "name": "Escrow",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "uint64",
                    "name": "timelock",
                    "desc": "The number seconds from the current time after the Escrow can be returned to the creator"
                },
                {
                    "type": "byte[32]",
                    "name": "secretHash",
                    "desc": "Hash of the secret in keccak256"
                },
                {
                    "type": "address",
                    "name": "taker",
                    "desc": "Creator of the escrow (Factory) can set taker address to the resolver address after it is know who won the auction"
                },
                {
                    "type": "address",
                    "name": "creator",
                    "desc": "Original creator of the escrow who called the factory"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secret",
                    "desc": "Secret"
                },
                {
                    "type": "uint64",
                    "name": "escrowId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw from escrow with known secret",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cancel",
            "args": [
                {
                    "type": "uint64",
                    "name": "escrowId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "After timelock runs out refund to original sender",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "makeHash",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secret",
                    "desc": "The secret"
                }
            ],
            "returns": {
                "type": "byte[]",
                "desc": "Hash of the secret"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Return hash of the secret.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "latestTimestamp",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Current time of the blockchain"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current time",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "escrowInstances": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64,uint64,address,address,byte[32],bool)[]",
                    "key": "ZXNjcm93SW5zdGFuY2Vz"
                },
                "escrowInstancesAmount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXNjcm93SW5zdGFuY2VzQW1vdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        360
                    ],
                    "errorMessage": "Escrow can be redeemed with password up to the rescue time"
                },
                {
                    "pc": [
                        328,
                        339,
                        344,
                        381,
                        392
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        104,
                        121,
                        148,
                        164,
                        183
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        401
                    ],
                    "errorMessage": "The escrow cannot be canceled yet"
                },
                {
                    "pc": [
                        353
                    ],
                    "errorMessage": "The password is not correct"
                },
                {
                    "pc": [
                        218
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        107,
                        124,
                        151,
                        167,
                        186
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        244,
                        302,
                        311,
                        319,
                        372
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        229
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQB5CCYDD2VzY3Jvd0luc3RhbmNlcwQVH3x1FWVzY3Jvd0luc3RhbmNlc0Ftb3VudDEbQQCZggUENbCQQQSn26VKBHcrOboE3uE94QRkzNkwNhoAjgUAUQA+AC4AEwACI0MxGRREMRhEiAFEFilMULAiQzEZFEQxGEQ2GgGIASlJFRZXBgJMUClMULAiQzEZFEQxGEQ2GgEXiADPIkMxGRREMRhENhoBNhoCF4gAhyJDMRkURDEYRDYaARc2GgI2GgM2GgSIABIWKUxQsCJDMRlA/4wxGBREIkOKBAEjOBAiEkSIAMoyB4v8CCM4CCMoZURXAgBPAxZPAxZQTwIWUIv/UIv+UIv9UIABgFBJFSQKFlcGAkxQVwIAUEkVJAoWVwYCTFAoTGcjKmVEIggqTGcjKmVEiYoCACMoZURXAgCL/yQLJFhJJVtLAYEQW0sCVzggTwNXWCCL/ogATBJEiABOTwMMREyIACqJigEAIyhlRFcCAIv/JAskWEklW0sBgRBbTwJXGCCIACVPAw1ETIgAAYmKAgCxMgCL/rIHi/+yCCKyELIBs4mKAQGL/wKJMgeJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}