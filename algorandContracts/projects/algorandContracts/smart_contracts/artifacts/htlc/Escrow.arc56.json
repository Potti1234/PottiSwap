{
    "name": "Escrow",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "uint64",
                    "name": "timelock",
                    "desc": "The number seconds from the current time after the Escrow can be returned to the creator"
                },
                {
                    "type": "byte[32]",
                    "name": "secretHash",
                    "desc": "Hash of the secret in keccak256"
                },
                {
                    "type": "address",
                    "name": "taker",
                    "desc": "Creator of the escrow (Factory) can set taker address to the resolver address after it is know who won the auction"
                },
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "The deposit transaction of the asset"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secret",
                    "desc": "Secret"
                },
                {
                    "type": "uint64",
                    "name": "escrowId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw from escrow with known secret",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cancel",
            "args": [
                {
                    "type": "uint64",
                    "name": "escrowId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "After timelock runs out refund to original sender",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "makeHash",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secret",
                    "desc": "The secret"
                }
            ],
            "returns": {
                "type": "byte[]",
                "desc": "Hash of the secret"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Return hash of the secret.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "latestTimestamp",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Current time of the blockchain"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current time",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "escrowInstances": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64,uint64,address,address,byte[32],bool)[]",
                    "key": "ZXNjcm93SW5zdGFuY2Vz"
                },
                "escrowInstancesAmount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXNjcm93SW5zdGFuY2VzQW1vdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        380
                    ],
                    "errorMessage": "Escrow can be redeemed with password up to the rescue time"
                },
                {
                    "pc": [
                        348,
                        359,
                        364,
                        401,
                        412
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        118,
                        135,
                        162,
                        178,
                        197
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        421
                    ],
                    "errorMessage": "The escrow cannot be canceled yet"
                },
                {
                    "pc": [
                        373
                    ],
                    "errorMessage": "The password is not correct"
                },
                {
                    "pc": [
                        239
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        121,
                        138,
                        165,
                        181,
                        200
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        264,
                        322,
                        331,
                        339,
                        392
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        220
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQB5CCYDD2VzY3Jvd0luc3RhbmNlcxVlc2Nyb3dJbnN0YW5jZXNBbW91bnQEFR98dTEYQAAJKIACAABnKSNnMRtBAKCCBQTetvDmBKfbpUoEdys5ugTe4T3hBGTM2TA2GgCOBQBRAD4ALgATAAIjQzEZFEQxGESIAUoWKkxQsCJDMRkURDEYRDYaAYgBL0kVFlcGAkxQKkxQsCJDMRkURDEYRDYaAReIANUiQzEZFEQxGEQ2GgE2GgIXiACNIkMxGRREMRhENhoBFzYaAjYaAzEWIglJOBAiEkSIABIWKkxQsCJDMRlA/4UxGBREIkOKBAGIAM8yB4v8CIv/OAiL/zgAIyhlRFcCAE8EFk8EFlBPAxZQTwJQi/5Qi/1QgAGAUEkVJAoWVwYCTFBXAgBQSRUkChZXBgJMUChMZyMpZUQiCClMZyMpZUSJigIAIyhlRFcCAIv/JAskWEklW0sBgRBbSwJXOCBPA1dYIIv+iABMEkSIAE5PAwxETIgAKomKAQAjKGVEVwIAi/8kCyRYSSVbSwGBEFtPAlcYIIgAJU8DDURMiAABiYoCALEyAIv+sgeL/7IIIrIQsgGziYoBAYv/AokyB4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}