{
    "hints": {
        "create(uint64,byte[32],address,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(byte[32],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cancel(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "makeHash(byte[32])byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "latestTimestamp()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "escrowInstances": {
                    "type": "bytes",
                    "key": "escrowInstances"
                },
                "escrowInstancesAmount": {
                    "type": "uint64",
                    "key": "escrowInstancesAmount"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Escrow",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "uint64",
                        "name": "timelock",
                        "desc": "The number seconds from the current time after the Escrow can be returned to the creator"
                    },
                    {
                        "type": "byte[32]",
                        "name": "secretHash",
                        "desc": "Hash of the secret in keccak256"
                    },
                    {
                        "type": "address",
                        "name": "taker",
                        "desc": "Creator of the escrow (Factory) can set taker address to the resolver address after it is know who won the auction"
                    },
                    {
                        "type": "pay",
                        "name": "txnDeposit",
                        "desc": "The deposit transaction of the asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "secret",
                        "desc": "Secret"
                    },
                    {
                        "type": "uint64",
                        "name": "escrowId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw from escrow with known secret"
            },
            {
                "name": "cancel",
                "args": [
                    {
                        "type": "uint64",
                        "name": "escrowId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "After timelock runs out refund to original sender"
            },
            {
                "name": "makeHash",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "secret",
                        "desc": "The secret"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[]",
                    "desc": "Hash of the secret"
                },
                "desc": "Return hash of the secret."
            },
            {
                "name": "latestTimestamp",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "Current time of the blockchain"
                },
                "desc": "Get current time"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}