{
    "hints": {
        "create(uint64,byte[32],address,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(byte[32],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cancel(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "makeHash(byte[32])byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "latestTimestamp()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDggMTYKICAgIGJ5dGVjYmxvY2sgImVzY3Jvd0luc3RhbmNlc0Ftb3VudCIgMHgxNTFmN2M3NSAiZXNjcm93SW5zdGFuY2VzIgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gcHVibGljIGVzY3Jvd0luc3RhbmNlc0Ftb3VudCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IDAgfSk7CiAgICBieXRlY18wIC8vICJlc2Nyb3dJbnN0YW5jZXNBbW91bnQiCiAgICBpbnRjXzEgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMgogICAgcHVzaGJ5dGVzcyAweGRlYjZmMGU2IDB4YTdkYmE1NGEgMHg3NzJiMzliYSAweGRlZTEzZGUxIDB4NjRjY2Q5MzAgLy8gbWV0aG9kICJjcmVhdGUodWludDY0LGJ5dGVbMzJdLGFkZHJlc3MscGF5KXVpbnQ2NCIsIG1ldGhvZCAid2l0aGRyYXcoYnl0ZVszMl0sdWludDY0KXZvaWQiLCBtZXRob2QgImNhbmNlbCh1aW50NjQpdm9pZCIsIG1ldGhvZCAibWFrZUhhc2goYnl0ZVszMl0pYnl0ZVtdIiwgbWV0aG9kICJsYXRlc3RUaW1lc3RhbXAoKXVpbnQ2NCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlX3JvdXRlQDUgbWFpbl93aXRoZHJhd19yb3V0ZUA2IG1haW5fY2FuY2VsX3JvdXRlQDcgbWFpbl9tYWtlSGFzaF9yb3V0ZUA4IG1haW5fbGF0ZXN0VGltZXN0YW1wX3JvdXRlQDkKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX2xhdGVzdFRpbWVzdGFtcF9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoxMTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgbGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX21ha2VIYXNoX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjEwOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6MTA4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBtYWtlSGFzaAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY2FuY2VsX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjc5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjI3CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo3OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgY2FuY2VsCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3dpdGhkcmF3X3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjYzCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjI3CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo2MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgd2l0aGRyYXcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjM5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjI3CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjM5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBjcmVhdGUKICAgIGl0b2IKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTYKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo6RXNjcm93LmNyZWF0ZSh0aW1lbG9jazogdWludDY0LCBzZWNyZXRIYXNoOiBieXRlcywgdGFrZXI6IGJ5dGVzLCB0eG5EZXBvc2l0OiB1aW50NjQpIC0+IHVpbnQ2NDoKY3JlYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czozOS00MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBjcmVhdGUodGltZWxvY2s6IHVpbnQ2NCwgc2VjcmV0SGFzaDogYXJjNC5TdGF0aWNCeXRlczwzMj4sIHRha2VyOiBBZGRyZXNzLCB0eG5EZXBvc2l0OiBndHhuLlBheW1lbnRUeG4pOiB1aW50NjQgewogICAgcHJvdG8gNCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjQyCiAgICAvLyBjcmVhdGVkVGltZTogbmV3IFVpbnRONjQodGhpcy5sYXRlc3RUaW1lc3RhbXAoKSksCiAgICBjYWxsc3ViIGxhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo0MwogICAgLy8gcmVzY3VlVGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCArIHRpbWVsb2NrKSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGZyYW1lX2RpZyAtNAogICAgKwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo0NAogICAgLy8gYW1vdW50OiBuZXcgVWludE42NCh0eG5EZXBvc2l0LmFtb3VudCksCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo0NQogICAgLy8gY3JlYXRvcjogbmV3IEFkZHJlc3ModHhuRGVwb3NpdC5zZW5kZXIpLAogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6NDEtNDkKICAgIC8vIGNvbnN0IG5ld0VzY3Jvd0luc3RhbmNlID0gbmV3IEVzY3Jvd0luc3RhbmNlKHsKICAgIC8vICAgY3JlYXRlZFRpbWU6IG5ldyBVaW50TjY0KHRoaXMubGF0ZXN0VGltZXN0YW1wKCkpLAogICAgLy8gICByZXNjdWVUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wICsgdGltZWxvY2spLAogICAgLy8gICBhbW91bnQ6IG5ldyBVaW50TjY0KHR4bkRlcG9zaXQuYW1vdW50KSwKICAgIC8vICAgY3JlYXRvcjogbmV3IEFkZHJlc3ModHhuRGVwb3NpdC5zZW5kZXIpLAogICAgLy8gICB0YWtlcjogdGFrZXIsCiAgICAvLyAgIHNlY3JldEhhc2g6IHNlY3JldEhhc2gsCiAgICAvLyAgIGFjdGl2ZTogbmV3IFVpbnRONjQoMSksCiAgICAvLyB9KTsKICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo0OAogICAgLy8gYWN0aXZlOiBuZXcgVWludE42NCgxKSwKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6NDEtNDkKICAgIC8vIGNvbnN0IG5ld0VzY3Jvd0luc3RhbmNlID0gbmV3IEVzY3Jvd0luc3RhbmNlKHsKICAgIC8vICAgY3JlYXRlZFRpbWU6IG5ldyBVaW50TjY0KHRoaXMubGF0ZXN0VGltZXN0YW1wKCkpLAogICAgLy8gICByZXNjdWVUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wICsgdGltZWxvY2spLAogICAgLy8gICBhbW91bnQ6IG5ldyBVaW50TjY0KHR4bkRlcG9zaXQuYW1vdW50KSwKICAgIC8vICAgY3JlYXRvcjogbmV3IEFkZHJlc3ModHhuRGVwb3NpdC5zZW5kZXIpLAogICAgLy8gICB0YWtlcjogdGFrZXIsCiAgICAvLyAgIHNlY3JldEhhc2g6IHNlY3JldEhhc2gsCiAgICAvLyAgIGFjdGl2ZTogbmV3IFVpbnRONjQoMSksCiAgICAvLyB9KTsKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gcHVibGljIGVzY3Jvd0luc3RhbmNlc0Ftb3VudCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IDAgfSk7CiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMCAvLyAiZXNjcm93SW5zdGFuY2VzQW1vdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6NTEKICAgIC8vIHRoaXMuZXNjcm93SW5zdGFuY2VzKHRoaXMuZXNjcm93SW5zdGFuY2VzQW1vdW50LnZhbHVlKS52YWx1ZSA9IG5ld0VzY3Jvd0luc3RhbmNlLmNvcHkoKTsKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6MjgKICAgIC8vIHB1YmxpYyBlc2Nyb3dJbnN0YW5jZXMgPSBCb3hNYXA8dWludDY0LCBFc2Nyb3dJbnN0YW5jZT4oeyBrZXlQcmVmaXg6ICJlc2Nyb3dJbnN0YW5jZXMiIH0pOwogICAgYnl0ZWNfMiAvLyAiZXNjcm93SW5zdGFuY2VzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjUxCiAgICAvLyB0aGlzLmVzY3Jvd0luc3RhbmNlcyh0aGlzLmVzY3Jvd0luc3RhbmNlc0Ftb3VudC52YWx1ZSkudmFsdWUgPSBuZXdFc2Nyb3dJbnN0YW5jZS5jb3B5KCk7CiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwdWJsaWMgZXNjcm93SW5zdGFuY2VzQW1vdW50ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogMCB9KTsKICAgIGludGNfMSAvLyAwCiAgICBieXRlY18wIC8vICJlc2Nyb3dJbnN0YW5jZXNBbW91bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gdGhpcy5lc2Nyb3dJbnN0YW5jZXNBbW91bnQudmFsdWUrKzsKICAgIGludGNfMCAvLyAxCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwdWJsaWMgZXNjcm93SW5zdGFuY2VzQW1vdW50ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogMCB9KTsKICAgIGJ5dGVjXzAgLy8gImVzY3Jvd0luc3RhbmNlc0Ftb3VudCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6NTMKICAgIC8vIHRoaXMuZXNjcm93SW5zdGFuY2VzQW1vdW50LnZhbHVlKys7CiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gcHVibGljIGVzY3Jvd0luc3RhbmNlc0Ftb3VudCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IDAgfSk7CiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMCAvLyAiZXNjcm93SW5zdGFuY2VzQW1vdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6NTUKICAgIC8vIHJldHVybiB0aGlzLmVzY3Jvd0luc3RhbmNlc0Ftb3VudC52YWx1ZTsKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6OkVzY3Jvdy53aXRoZHJhdyhzZWNyZXQ6IGJ5dGVzLCBlc2Nyb3dJZDogdWludDY0KSAtPiB2b2lkOgp3aXRoZHJhdzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6NjMtNjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgd2l0aGRyYXcoc2VjcmV0OiBhcmM0LlN0YXRpY0J5dGVzPDMyPiwgZXNjcm93SWQ6IHVpbnQ2NCkgewogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjY1CiAgICAvLyBjb25zdCBlc2Nyb3dJbnN0YW5jZSA9IHRoaXMuZXNjcm93SW5zdGFuY2VzKGVzY3Jvd0lkKS52YWx1ZS5jb3B5KCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6MjgKICAgIC8vIHB1YmxpYyBlc2Nyb3dJbnN0YW5jZXMgPSBCb3hNYXA8dWludDY0LCBFc2Nyb3dJbnN0YW5jZT4oeyBrZXlQcmVmaXg6ICJlc2Nyb3dJbnN0YW5jZXMiIH0pOwogICAgYnl0ZWNfMiAvLyAiZXNjcm93SW5zdGFuY2VzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjY1CiAgICAvLyBjb25zdCBlc2Nyb3dJbnN0YW5jZSA9IHRoaXMuZXNjcm93SW5zdGFuY2VzKGVzY3Jvd0lkKS52YWx1ZS5jb3B5KCk7CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo2NwogICAgLy8gYXNzZXJ0KHRoaXMubWFrZUhhc2goc2VjcmV0KSA9PT0gZXNjcm93SW5zdGFuY2Uuc2VjcmV0SGFzaC5ieXRlcywgIlRoZSBwYXNzd29yZCBpcyBub3QgY29ycmVjdCIpOwogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIG1ha2VIYXNoCiAgICBkaWcgMQogICAgZXh0cmFjdCA4OCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIHBhc3N3b3JkIGlzIG5vdCBjb3JyZWN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjY5CiAgICAvLyBhc3NlcnQodGhpcy5sYXRlc3RUaW1lc3RhbXAoKSA8IGVzY3Jvd0luc3RhbmNlLnJlc2N1ZVRpbWUubmF0aXZlLCAiRXNjcm93IGNhbiBiZSByZWRlZW1lZCB3aXRoIHBhc3N3b3JkIHVwIHRvIHRoZSByZXNjdWUgdGltZSIpOwogICAgY2FsbHN1YiBsYXRlc3RUaW1lc3RhbXAKICAgIGRpZyAxCiAgICBpbnRjXzIgLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIDwKICAgIGFzc2VydCAvLyBFc2Nyb3cgY2FuIGJlIHJlZGVlbWVkIHdpdGggcGFzc3dvcmQgdXAgdG8gdGhlIHJlc2N1ZSB0aW1lCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjcyCiAgICAvLyB0aGlzLl9zZW5kKGVzY3Jvd0luc3RhbmNlLnRha2VyLCBlc2Nyb3dJbnN0YW5jZS5hbW91bnQubmF0aXZlKTsKICAgIGR1cAogICAgZXh0cmFjdCA1NiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHN3YXAKICAgIGludGNfMyAvLyAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIGNhbGxzdWIgX3NlbmQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6OkVzY3Jvdy5jYW5jZWwoZXNjcm93SWQ6IHVpbnQ2NCkgLT4gdm9pZDoKY2FuY2VsOgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo3OS04MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBjYW5jZWwoZXNjcm93SWQ6IHVpbnQ2NCkgewogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjgxCiAgICAvLyBjb25zdCBlc2Nyb3dJbnN0YW5jZSA9IHRoaXMuZXNjcm93SW5zdGFuY2VzKGVzY3Jvd0lkKS52YWx1ZS5jb3B5KCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6MjgKICAgIC8vIHB1YmxpYyBlc2Nyb3dJbnN0YW5jZXMgPSBCb3hNYXA8dWludDY0LCBFc2Nyb3dJbnN0YW5jZT4oeyBrZXlQcmVmaXg6ICJlc2Nyb3dJbnN0YW5jZXMiIH0pOwogICAgYnl0ZWNfMiAvLyAiZXNjcm93SW5zdGFuY2VzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjgxCiAgICAvLyBjb25zdCBlc2Nyb3dJbnN0YW5jZSA9IHRoaXMuZXNjcm93SW5zdGFuY2VzKGVzY3Jvd0lkKS52YWx1ZS5jb3B5KCk7CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo4MwogICAgLy8gYXNzZXJ0KHRoaXMubGF0ZXN0VGltZXN0YW1wKCkgPiBlc2Nyb3dJbnN0YW5jZS5yZXNjdWVUaW1lLm5hdGl2ZSwgIlRoZSBlc2Nyb3cgY2Fubm90IGJlIGNhbmNlbGVkIHlldCIpOwogICAgY2FsbHN1YiBsYXRlc3RUaW1lc3RhbXAKICAgIGRpZyAxCiAgICBpbnRjXzIgLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgID4KICAgIGFzc2VydCAvLyBUaGUgZXNjcm93IGNhbm5vdCBiZSBjYW5jZWxlZCB5ZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6ODYKICAgIC8vIHRoaXMuX3NlbmQoZXNjcm93SW5zdGFuY2UuY3JlYXRvciwgZXNjcm93SW5zdGFuY2UuYW1vdW50Lm5hdGl2ZSk7CiAgICBkdXAKICAgIGV4dHJhY3QgMjQgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBzd2FwCiAgICBpbnRjXzMgLy8gMTYKICAgIGV4dHJhY3RfdWludDY0CiAgICBjYWxsc3ViIF9zZW5kCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cuX3NlbmQocmVjZWl2ZXI6IGJ5dGVzLCBhbW91bnQ6IHVpbnQ2NCkgLT4gdm9pZDoKX3NlbmQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjkyCiAgICAvLyBwcml2YXRlIF9zZW5kKHJlY2VpdmVyOiBBZGRyZXNzLCBhbW91bnQ6IHVpbnQ2NCk6IHZvaWQgewogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjkzLTk5CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IGFtb3VudCwKICAgIC8vICAgICBmZWU6IEdsb2JhbC5taW5UeG5GZWUsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHJlY2VpdmVyLmJ5dGVzLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCk7CiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjk2CiAgICAvLyBmZWU6IEdsb2JhbC5taW5UeG5GZWUsCiAgICBnbG9iYWwgTWluVHhuRmVlCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6OTMtOTgKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogYW1vdW50LAogICAgLy8gICAgIGZlZTogR2xvYmFsLm1pblR4bkZlZSwKICAgIC8vICAgICByZWNlaXZlcjogcmVjZWl2ZXIuYnl0ZXMsCiAgICAvLyAgIH0pCiAgICBpbnRjXzAgLy8gMQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6OTMtOTkKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogYW1vdW50LAogICAgLy8gICAgIGZlZTogR2xvYmFsLm1pblR4bkZlZSwKICAgIC8vICAgICByZWNlaXZlcjogcmVjZWl2ZXIuYnl0ZXMsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKTsKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvaHRsYy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cubWFrZUhhc2goc2VjcmV0OiBieXRlcykgLT4gYnl0ZXM6Cm1ha2VIYXNoOgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoxMDgtMTA5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIG1ha2VIYXNoKHNlY3JldDogYXJjNC5TdGF0aWNCeXRlczwzMj4pOiBieXRlcyB7CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2NvbnRyYWN0LmFsZ28udHM6MTEwCiAgICAvLyByZXR1cm4gb3Aua2VjY2FrMjU2KHNlY3JldC5ieXRlcyk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGtlY2NhazI1NgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czo6RXNjcm93LmxhdGVzdFRpbWVzdGFtcCgpIC0+IHVpbnQ2NDoKbGF0ZXN0VGltZXN0YW1wOgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvY29udHJhY3QuYWxnby50czoxMTkKICAgIC8vIHJldHVybiBHbG9iYWwubGF0ZXN0VGltZXN0YW1wOwogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "escrowInstancesAmount": {
                    "type": "uint64",
                    "key": "escrowInstancesAmount"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Escrow",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "uint64",
                        "name": "timelock",
                        "desc": "The number seconds from the current time after the Escrow can be returned to the creator"
                    },
                    {
                        "type": "byte[32]",
                        "name": "secretHash",
                        "desc": "Hash of the secret in keccak256"
                    },
                    {
                        "type": "address",
                        "name": "taker",
                        "desc": "Creator of the escrow (Factory) can set taker address to the resolver address after it is know who won the auction"
                    },
                    {
                        "type": "pay",
                        "name": "txnDeposit",
                        "desc": "The deposit transaction of the asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "secret",
                        "desc": "Secret"
                    },
                    {
                        "type": "uint64",
                        "name": "escrowId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw from escrow with known secret"
            },
            {
                "name": "cancel",
                "args": [
                    {
                        "type": "uint64",
                        "name": "escrowId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "After timelock runs out refund to original sender"
            },
            {
                "name": "makeHash",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "secret",
                        "desc": "The secret"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[]",
                    "desc": "Hash of the secret"
                },
                "desc": "Return hash of the secret."
            },
            {
                "name": "latestTimestamp",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "Current time of the blockchain"
                },
                "desc": "Get current time"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}