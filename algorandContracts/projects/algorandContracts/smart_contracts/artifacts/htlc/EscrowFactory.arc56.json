{
    "name": "EscrowFactory",
    "structs": {},
    "methods": [
        {
            "name": "createEscrow",
            "args": [
                {
                    "type": "uint64",
                    "name": "timelock",
                    "desc": "The number seconds from the current time after the Escrow can be returned to the creator"
                },
                {
                    "type": "byte[32]",
                    "name": "secretHash",
                    "desc": "Hash of the secret in keccak256"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        93
                    ],
                    "errorMessage": "Deposit should be positive number"
                },
                {
                    "pc": [
                        498
                    ],
                    "errorMessage": "Escrow contract creation failed"
                },
                {
                    "pc": [
                        29
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        81
                    ],
                    "errorMessage": "Receiver must be the escrow app"
                },
                {
                    "pc": [
                        88
                    ],
                    "errorMessage": "Sender of deposit must be the same as the sender of the app call"
                },
                {
                    "pc": [
                        63
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        32
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        74
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czoxOAogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3Jvd0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdANgogICAgcHVzaGJ5dGVzIDB4NTQ3ODdjOTAgLy8gbWV0aG9kICJjcmVhdGVFc2Nyb3codWludDY0LGJ5dGVbMzJdKXVpbnQ2NCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlRXNjcm93X3JvdXRlQDMKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czoxOAogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3Jvd0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2NyZWF0ZUVzY3Jvd19yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjI3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9lc2Nyb3dGYWN0b3J5LmFsZ28udHM6MTgKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3dGYWN0b3J5IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjI3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBjcmVhdGVFc2Nyb3cKICAgIGl0b2IKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czoxOAogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3Jvd0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDEwCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czo6RXNjcm93RmFjdG9yeS5jcmVhdGVFc2Nyb3codGltZWxvY2s6IHVpbnQ2NCwgc2VjcmV0SGFzaDogYnl0ZXMpIC0+IHVpbnQ2NDoKY3JlYXRlRXNjcm93OgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjI3LTI4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGNyZWF0ZUVzY3Jvdyh0aW1lbG9jazogdWludDY0LCBzZWNyZXRIYXNoOiBhcmM0LlN0YXRpY0J5dGVzPDMyPik6IHVpbnQ2NCB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czoyOQogICAgLy8gY29uc3QgdHhuRGVwb3NpdCA9IGd0eG4uUGF5bWVudFR4bigwKTsKICAgIGludGNfMCAvLyAwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czozMAogICAgLy8gYXNzZXJ0KHR4bkRlcG9zaXQucmVjZWl2ZXIgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLCAiUmVjZWl2ZXIgbXVzdCBiZSB0aGUgZXNjcm93IGFwcCIpOwogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIFJlY2VpdmVyIG11c3QgYmUgdGhlIGVzY3JvdyBhcHAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czoyOQogICAgLy8gY29uc3QgdHhuRGVwb3NpdCA9IGd0eG4uUGF5bWVudFR4bigwKTsKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9lc2Nyb3dGYWN0b3J5LmFsZ28udHM6MzEKICAgIC8vIGFzc2VydCh0eG5EZXBvc2l0LnNlbmRlciA9PT0gVHhuLnNlbmRlciwgIlNlbmRlciBvZiBkZXBvc2l0IG11c3QgYmUgdGhlIHNhbWUgYXMgdGhlIHNlbmRlciBvZiB0aGUgYXBwIGNhbGwiKTsKICAgIGd0eG5zIFNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBTZW5kZXIgb2YgZGVwb3NpdCBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSBzZW5kZXIgb2YgdGhlIGFwcCBjYWxsCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9lc2Nyb3dGYWN0b3J5LmFsZ28udHM6MjkKICAgIC8vIGNvbnN0IHR4bkRlcG9zaXQgPSBndHhuLlBheW1lbnRUeG4oMCk7CiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjMzCiAgICAvLyBhc3NlcnQodHhuRGVwb3NpdC5hbW91bnQgPiAwLCAiRGVwb3NpdCBzaG91bGQgYmUgcG9zaXRpdmUgbnVtYmVyIik7CiAgICBndHhucyBBbW91bnQKICAgIGR1cAogICAgYXNzZXJ0IC8vIERlcG9zaXQgc2hvdWxkIGJlIHBvc2l0aXZlIG51bWJlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjM4LTQ0CiAgICAvLyBjb25zdCBlc2Nyb3dBcHBJZCA9IGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwcm92YWxQcm9ncmFtOiBjb21waWxlZF9lc2Nyb3dfY29udHJhY3QuYXBwcm92YWxQcm9ncmFtLAogICAgLy8gICAgIGNsZWFyU3RhdGVQcm9ncmFtOiBjb21waWxlZF9lc2Nyb3dfY29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0sCiAgICAvLyAgICAgZmVlOiBHbG9iYWwubWluVHhuRmVlLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCk7CiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9lc2Nyb3dGYWN0b3J5LmFsZ28udHM6NDIKICAgIC8vIGZlZTogR2xvYmFsLm1pblR4bkZlZSwKICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czozNQogICAgLy8gY29uc3QgY29tcGlsZWRfZXNjcm93X2NvbnRyYWN0ID0gY29tcGlsZShFc2Nyb3cpOwogICAgcHVzaGJ5dGVzIGJhc2U2NChDb0VCUXc9PSkKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgcHVzaGJ5dGVzIGJhc2U2NChDaUFDQUFFbUJnWmhiVzkxYm5RS2NtVnpZM1ZsVkdsdFpRUVZIM3gxQ25ObFkzSmxkRWhoYzJnRmRHRnJaWElIWTNKbFlYUnZjakViUVFDVGdnVUVDU1A5RXdRQkRvd1BCREh5YXBzRTN1RTk0UVJrek5rd05ob0FqZ1VBU1FBNkFDNEFFd0FDSWtNeEdSUkVNUmhFaUFFR0ZpcE1VTEFqUXpFWkZFUXhHRVEyR2dHSUFPdEpGUlpYQmdKTVVDcE1VTEFqUXpFWkZFUXhHRVNJQUtnalF6RVpGRVF4R0VRMkdnR0lBSFVqUXpFWkZFUXhHRVF4RmlNSlNUZ1FJeEpFTmhvQkZ6WWFBallhQTRnQURTTkRNUmxBLzVJeEdCUkVJME9LQkFDTC9EZ0hNZ29TUkl2OE9BQXhBQkpFaS93NENDaE1aeUlvWlVSRWlBQjhnQXRqY21WaGRHVmtWR2x0WlV4bk1nZUwvUWdwVEdjcmkvNW5Kd1NMLzJjbkJURUFaNG1LQVFDTC80Z0FSeUlyWlVRU1JJZ0FSU0lwWlVRTVJDSW5CR1ZFSWlobFJJZ0FGNGtpS1dWRWlBQXJERVFpSndWbFJDSW9aVVNJQUFHSmlnSUFzVElBaS82eUI0di9zZ2dqc2hDeUFiT0ppZ0VCaS84Q2lUSUhpUT09KQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW1QYWdlcwogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjM4LTQzCiAgICAvLyBjb25zdCBlc2Nyb3dBcHBJZCA9IGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwcm92YWxQcm9ncmFtOiBjb21waWxlZF9lc2Nyb3dfY29udHJhY3QuYXBwcm92YWxQcm9ncmFtLAogICAgLy8gICAgIGNsZWFyU3RhdGVQcm9ncmFtOiBjb21waWxlZF9lc2Nyb3dfY29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0sCiAgICAvLyAgICAgZmVlOiBHbG9iYWwubWluVHhuRmVlLAogICAgLy8gICB9KQogICAgaW50Y18yIC8vIDYKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9lc2Nyb3dGYWN0b3J5LmFsZ28udHM6MzgtNDQKICAgIC8vIGNvbnN0IGVzY3Jvd0FwcElkID0gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHByb3ZhbFByb2dyYW06IGNvbXBpbGVkX2VzY3Jvd19jb250cmFjdC5hcHByb3ZhbFByb2dyYW0sCiAgICAvLyAgICAgY2xlYXJTdGF0ZVByb2dyYW06IGNvbXBpbGVkX2VzY3Jvd19jb250cmFjdC5jbGVhclN0YXRlUHJvZ3JhbSwKICAgIC8vICAgICBmZWU6IEdsb2JhbC5taW5UeG5GZWUsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKTsKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czo0NgogICAgLy8gYXNzZXJ0KGVzY3Jvd0FwcElkLmFwcElkLmlkID4gMCwgIkVzY3JvdyBjb250cmFjdCBjcmVhdGlvbiBmYWlsZWQiKTsKICAgIGR1cAogICAgYXNzZXJ0IC8vIEVzY3JvdyBjb250cmFjdCBjcmVhdGlvbiBmYWlsZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czo0NwogICAgLy8gY29uc3QgZXNjcm93QXBwQWRkcmVzcyA9IGVzY3Jvd0FwcElkLmFjY291bnRzKDApOwogICAgaXR4bmEgQWNjb3VudHMgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjUwLTU2CiAgICAvLyBjb25zdCBlc2Nyb3dDYWxsID0gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogZXNjcm93QXBwSWQuYXBwSWQuaWQsCiAgICAvLyAgICAgYXBwQXJnczogW3RpbWVsb2NrLCBzZWNyZXRIYXNoLmJ5dGVzLCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5ieXRlc10sCiAgICAvLyAgICAgZmVlOiBHbG9iYWwubWluVHhuRmVlLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCk7CiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9lc2Nyb3dGYWN0b3J5LmFsZ28udHM6NTQKICAgIC8vIGZlZTogR2xvYmFsLm1pblR4bkZlZSwKICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czo1MwogICAgLy8gYXBwQXJnczogW3RpbWVsb2NrLCBzZWNyZXRIYXNoLmJ5dGVzLCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5ieXRlc10sCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGRpZyAyCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czo1MC01NQogICAgLy8gY29uc3QgZXNjcm93Q2FsbCA9IGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwSWQ6IGVzY3Jvd0FwcElkLmFwcElkLmlkLAogICAgLy8gICAgIGFwcEFyZ3M6IFt0aW1lbG9jaywgc2VjcmV0SGFzaC5ieXRlcywgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYnl0ZXNdLAogICAgLy8gICAgIGZlZTogR2xvYmFsLm1pblR4bkZlZSwKICAgIC8vICAgfSkKICAgIGludGNfMiAvLyA2CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjUwLTU2CiAgICAvLyBjb25zdCBlc2Nyb3dDYWxsID0gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogZXNjcm93QXBwSWQuYXBwSWQuaWQsCiAgICAvLyAgICAgYXBwQXJnczogW3RpbWVsb2NrLCBzZWNyZXRIYXNoLmJ5dGVzLCBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5ieXRlc10sCiAgICAvLyAgICAgZmVlOiBHbG9iYWwubWluVHhuRmVlLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCk7CiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjU5LTY1CiAgICAvLyBjb25zdCBkZXBvc2l0ID0gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiB0eG5EZXBvc2l0LmFtb3VudCwKICAgIC8vICAgICByZWNlaXZlcjogZXNjcm93QXBwQWRkcmVzcywKICAgIC8vICAgICBzZW5kZXI6IFR4bi5zZW5kZXIsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKTsKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czo2MwogICAgLy8gc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgaXR4bl9maWVsZCBTZW5kZXIKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvaHRsYy9lc2Nyb3dGYWN0b3J5LmFsZ28udHM6NTktNjQKICAgIC8vIGNvbnN0IGRlcG9zaXQgPSBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IHR4bkRlcG9zaXQuYW1vdW50LAogICAgLy8gICAgIHJlY2VpdmVyOiBlc2Nyb3dBcHBBZGRyZXNzLAogICAgLy8gICAgIHNlbmRlcjogVHhuLnNlbmRlciwKICAgIC8vICAgfSkKICAgIGludGNfMSAvLyAxCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9odGxjL2VzY3Jvd0ZhY3RvcnkuYWxnby50czo1OS02NQogICAgLy8gY29uc3QgZGVwb3NpdCA9IGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogdHhuRGVwb3NpdC5hbW91bnQsCiAgICAvLyAgICAgcmVjZWl2ZXI6IGVzY3Jvd0FwcEFkZHJlc3MsCiAgICAvLyAgICAgc2VuZGVyOiBUeG4uc2VuZGVyLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCk7CiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2h0bGMvZXNjcm93RmFjdG9yeS5hbGdvLnRzOjY3CiAgICAvLyByZXR1cm4gZXNjcm93QXBwSWQuYXBwSWQuaWQ7CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAEGMRtBACyABFR4fJA2GgCOAQACIkMxGRREMRhENhoBFzYaAogAFxaABBUffHVMULAjQzEZQP/cMRgURCNDigIBIjgQIxJEIjgHMgoSRCI4ADEAEkQiOAhJRLEyAIAECoEBQ7JCgPsCCiACAAEmBgZhbW91bnQKcmVzY3VlVGltZQQVH3x1CnNlY3JldEhhc2gFdGFrZXIHY3JlYXRvcjEbQQCTggUECSP9EwQBDowPBDHyapsE3uE94QRkzNkwNhoAjgUASQA6AC4AEwACIkMxGRREMRhEiAEGFipMULAjQzEZFEQxGEQ2GgGIAOtJFRZXBgJMUCpMULAjQzEZFEQxGESIAKgjQzEZFEQxGEQ2GgGIAHUjQzEZFEQxGEQxFiMJSTgQIxJENhoBFzYaAjYaA4gADSNDMRlA/5IxGBREI0OKBACL/DgHMgoSRIv8OAAxABJEi/w4CChMZyIoZUREiAB8gAtjcmVhdGVkVGltZUxnMgeL/QgpTGcri/5nJwSL/2cnBTEAZ4mKAQCL/4gARyIrZUQSRIgARSIpZUQMRCInBGVEIihlRIgAF4kiKWVEiAArDEQiJwVlRCIoZUSIAAGJigIAsTIAi/6yB4v/sggjshCyAbOJigEBi/8CiTIHibJAJLIQsgGztBhJRLUcALEyAIv+FjIKTLIai/+yGrIaSwKyGCSyELIBs7ExALIAsgdMsggjshAisgGziQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}