{
  "version": 3,
  "sources": [
    "/home/lukas/CodingProjects/PottiSwap/algorandContracts/projects/algorandContracts/smart_contracts/htlc/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BS;AAA4D;AAAnE;AAFF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AA0FG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAjFH;;;AAiFG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AApDH;;;AAAA;AAoDG;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AApCH;;;AAAA;;;AAAA;AAoCG;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAZH;;;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAYE;;;AAG6B;;;AAAZ;AACkB;;AAAP;;AAAA;AAAZ;AACmB;;AAAA;;AAAvB;AACwB;;AAAA;;AAJR;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAOhB;;;;;;;;;;AAPgB;AAZrB;AAAA;AAAA;AAAA;AAsBL;AAvBmE;AAAA;AAAA;AAuBnE;AAAA;AAtBK;AAAA;AAAA;AAAA;AAwBL;AAAA;AAxBK;AAwBL;AAAA;AAxBK;AAAA;AAAA;AAAA;AA0BL;AAQF;;;AAEyB;;AAAA;AArC4C;AAAA;AAAA;AAqCb;AAAA;AAE/C;;AAAA;;;AAAyC;;AAAA;;;AAAzC;AAAP;AAEO;;;AAAmD;;AAAX;AAAW;AAAnD;AAAP;AAG0B;AAAA;;;AAA6B;AAAP;AAAO;AAAvD;;;;AAOF;;;AAEyB;;AAAA;AArD4C;AAAA;AAAA;AAqDb;AAAA;AAE/C;;;AAAmD;;AAAX;AAAW;AAAnD;AAAP;AAG0B;AAAA;;;AAA+B;AAAP;AAAO;AAAzD;;;;AAMF;;;AACE;AAGgB;;;;;;;;;;AAHhB;;;;;AAAA;;AAeF;;;AAES;;AAAA;AAAP;AASc;;AAAd",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8 16"
    },
    "7": {
      "op": "bytecblock \"escrowInstancesAmount\" 0x151f7c75 \"escrowInstances\""
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "54": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "57": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "defined_out": [
        "\"escrowInstancesAmount\""
      ],
      "stack_out": [
        "\"escrowInstancesAmount\""
      ]
    },
    "58": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"escrowInstancesAmount\"",
        "0"
      ],
      "stack_out": [
        "\"escrowInstancesAmount\"",
        "0"
      ]
    },
    "59": {
      "op": "app_global_put",
      "stack_out": []
    },
    "60": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "62": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "65": {
      "op": "pushbytess 0xdeb6f0e6 0xa7dba54a 0x772b39ba 0xdee13de1 0x64ccd930 // method \"create(uint64,byte[32],address,pay)uint64\", method \"withdraw(byte[32],uint64)void\", method \"cancel(uint64)void\", method \"makeHash(byte[32])byte[]\", method \"latestTimestamp()uint64\"",
      "defined_out": [
        "Method(cancel(uint64)void)",
        "Method(create(uint64,byte[32],address,pay)uint64)",
        "Method(latestTimestamp()uint64)",
        "Method(makeHash(byte[32])byte[])",
        "Method(withdraw(byte[32],uint64)void)"
      ],
      "stack_out": [
        "Method(create(uint64,byte[32],address,pay)uint64)",
        "Method(withdraw(byte[32],uint64)void)",
        "Method(cancel(uint64)void)",
        "Method(makeHash(byte[32])byte[])",
        "Method(latestTimestamp()uint64)"
      ]
    },
    "92": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(cancel(uint64)void)",
        "Method(create(uint64,byte[32],address,pay)uint64)",
        "Method(latestTimestamp()uint64)",
        "Method(makeHash(byte[32])byte[])",
        "Method(withdraw(byte[32],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(uint64,byte[32],address,pay)uint64)",
        "Method(withdraw(byte[32],uint64)void)",
        "Method(cancel(uint64)void)",
        "Method(makeHash(byte[32])byte[])",
        "Method(latestTimestamp()uint64)",
        "tmp%2#0"
      ]
    },
    "95": {
      "op": "match main_create_route@5 main_withdraw_route@6 main_cancel_route@7 main_makeHash_route@8 main_latestTimestamp_route@9",
      "stack_out": []
    },
    "107": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "108": {
      "op": "return",
      "stack_out": []
    },
    "109": {
      "block": "main_latestTimestamp_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "111": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "112": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "113": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "115": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "116": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "119": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "120": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "121": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "122": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "123": {
      "op": "log",
      "stack_out": []
    },
    "124": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "125": {
      "op": "return",
      "stack_out": []
    },
    "126": {
      "block": "main_makeHash_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "128": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "129": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "133": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "136": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.makeHash",
      "op": "callsub makeHash",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "139": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "140": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "141": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "142": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "147": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "148": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "149": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "150": {
      "op": "log",
      "stack_out": []
    },
    "151": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "block": "main_cancel_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "155": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "159": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "160": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "163": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "164": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.cancel",
      "op": "callsub cancel",
      "stack_out": []
    },
    "167": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "168": {
      "op": "return",
      "stack_out": []
    },
    "169": {
      "block": "main_withdraw_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "171": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "172": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "173": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "175": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "176": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "179": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "182": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "tmp%14#0"
      ]
    },
    "183": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "186": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "187": {
      "op": "return",
      "stack_out": []
    },
    "188": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "190": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "191": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "192": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "194": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "195": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "198": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "199": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "205": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%8#0"
      ]
    },
    "207": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%8#0",
        "1"
      ]
    },
    "208": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "209": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "210": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "212": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "213": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "214": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "215": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.create",
      "op": "callsub create",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "218": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "219": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "220": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": []
    },
    "223": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "227": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "230": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "232": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "233": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "234": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": []
    },
    "236": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.create",
      "params": {
        "timelock#0": "uint64",
        "secretHash#0": "bytes",
        "taker#0": "bytes",
        "txnDeposit#0": "uint64"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "239": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "242": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "243": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "frame_dig -4",
      "defined_out": [
        "timelock#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "timelock#0 (copy)"
      ]
    },
    "247": {
      "op": "+",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%1#0"
      ]
    },
    "248": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "249": {
      "op": "frame_dig -1",
      "defined_out": [
        "txnDeposit#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "251": {
      "op": "gtxns Amount",
      "defined_out": [
        "to_encode%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "to_encode%2#0"
      ]
    },
    "253": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "254": {
      "op": "frame_dig -1",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "256": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%1#0"
      ]
    },
    "258": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "260": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%2#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "262": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "263": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "266": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0"
      ]
    },
    "267": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "268": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "taker#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "taker#0 (copy)"
      ]
    },
    "270": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "271": {
      "op": "frame_dig -3",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "secretHash#0 (copy)"
      ]
    },
    "273": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "274": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x0000000000000001"
      ]
    },
    "284": {
      "op": "concat",
      "defined_out": [
        "newEscrowInstance#0"
      ],
      "stack_out": [
        "newEscrowInstance#0"
      ]
    },
    "285": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "newEscrowInstance#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "0"
      ]
    },
    "286": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "defined_out": [
        "\"escrowInstancesAmount\"",
        "0",
        "newEscrowInstance#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "0",
        "\"escrowInstancesAmount\""
      ]
    },
    "287": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "newEscrowInstance#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "288": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newEscrowInstance#0",
        "maybe_value%0#0"
      ]
    },
    "289": {
      "op": "itob",
      "defined_out": [
        "newEscrowInstance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "tmp%2#0"
      ]
    },
    "290": {
      "op": "bytec_2 // \"escrowInstances\"",
      "defined_out": [
        "\"escrowInstances\"",
        "newEscrowInstance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "tmp%2#0",
        "\"escrowInstances\""
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "newEscrowInstance#0",
        "\"escrowInstances\"",
        "tmp%2#0"
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "newEscrowInstance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "tmp%3#0"
      ]
    },
    "293": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "newEscrowInstance#0"
      ]
    },
    "294": {
      "op": "box_put",
      "stack_out": []
    },
    "295": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "296": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "stack_out": [
        "0",
        "\"escrowInstancesAmount\""
      ]
    },
    "297": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "298": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "299": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "300": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "301": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"escrowInstancesAmount\""
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "\"escrowInstancesAmount\"",
        "new_state_value%0#0"
      ]
    },
    "303": {
      "op": "app_global_put",
      "stack_out": []
    },
    "304": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "305": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "stack_out": [
        "0",
        "\"escrowInstancesAmount\""
      ]
    },
    "306": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "307": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "308": {
      "retsub": true,
      "op": "retsub"
    },
    "309": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.withdraw",
      "params": {
        "secret#0": "bytes",
        "escrowId#0": "uint64"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "312": {
      "op": "frame_dig -1",
      "defined_out": [
        "escrowId#0 (copy)"
      ],
      "stack_out": [
        "escrowId#0 (copy)"
      ]
    },
    "314": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "315": {
      "op": "bytec_2 // \"escrowInstances\"",
      "defined_out": [
        "\"escrowInstances\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"escrowInstances\""
      ]
    },
    "316": {
      "op": "swap",
      "stack_out": [
        "\"escrowInstances\"",
        "tmp%0#0"
      ]
    },
    "317": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "318": {
      "op": "box_get",
      "defined_out": [
        "escrowInstance#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "maybe_exists%0#0"
      ]
    },
    "319": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "escrowInstance#0"
      ]
    },
    "320": {
      "op": "frame_dig -2",
      "defined_out": [
        "escrowInstance#0",
        "secret#0 (copy)"
      ],
      "stack_out": [
        "escrowInstance#0",
        "secret#0 (copy)"
      ]
    },
    "322": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.makeHash",
      "op": "callsub makeHash",
      "defined_out": [
        "escrowInstance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%2#0"
      ]
    },
    "325": {
      "op": "dig 1",
      "defined_out": [
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%2#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "327": {
      "error": "Index access is out of bounds",
      "op": "extract 88 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrowInstance#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "330": {
      "op": "==",
      "defined_out": [
        "escrowInstance#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%4#0"
      ]
    },
    "331": {
      "error": "The password is not correct",
      "op": "assert // The password is not correct",
      "stack_out": [
        "escrowInstance#0"
      ]
    },
    "332": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "escrowInstance#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%5#0"
      ]
    },
    "335": {
      "op": "dig 1",
      "stack_out": [
        "escrowInstance#0",
        "tmp%5#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "337": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%5#0",
        "escrowInstance#0 (copy)",
        "8"
      ]
    },
    "338": {
      "op": "extract_uint64",
      "defined_out": [
        "escrowInstance#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "339": {
      "op": "<",
      "defined_out": [
        "escrowInstance#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%8#0"
      ]
    },
    "340": {
      "error": "Escrow can be redeemed with password up to the rescue time",
      "op": "assert // Escrow can be redeemed with password up to the rescue time",
      "stack_out": [
        "escrowInstance#0"
      ]
    },
    "341": {
      "op": "dup",
      "stack_out": [
        "escrowInstance#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "342": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrowInstance#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%9#0"
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "tmp%9#0",
        "escrowInstance#0"
      ]
    },
    "346": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "escrowInstance#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "escrowInstance#0",
        "16"
      ]
    },
    "347": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "348": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": []
    },
    "351": {
      "retsub": true,
      "op": "retsub"
    },
    "352": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.cancel",
      "params": {
        "escrowId#0": "uint64"
      },
      "block": "cancel",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "355": {
      "op": "frame_dig -1",
      "defined_out": [
        "escrowId#0 (copy)"
      ],
      "stack_out": [
        "escrowId#0 (copy)"
      ]
    },
    "357": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "358": {
      "op": "bytec_2 // \"escrowInstances\"",
      "defined_out": [
        "\"escrowInstances\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"escrowInstances\""
      ]
    },
    "359": {
      "op": "swap",
      "stack_out": [
        "\"escrowInstances\"",
        "tmp%0#0"
      ]
    },
    "360": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "361": {
      "op": "box_get",
      "defined_out": [
        "escrowInstance#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "maybe_exists%0#0"
      ]
    },
    "362": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "escrowInstance#0"
      ]
    },
    "363": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "escrowInstance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%2#0"
      ]
    },
    "366": {
      "op": "dig 1",
      "defined_out": [
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%2#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "368": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%2#0",
        "escrowInstance#0 (copy)",
        "8"
      ]
    },
    "369": {
      "op": "extract_uint64",
      "defined_out": [
        "escrowInstance#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "370": {
      "op": ">",
      "defined_out": [
        "escrowInstance#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%5#0"
      ]
    },
    "371": {
      "error": "The escrow cannot be canceled yet",
      "op": "assert // The escrow cannot be canceled yet",
      "stack_out": [
        "escrowInstance#0"
      ]
    },
    "372": {
      "op": "dup",
      "stack_out": [
        "escrowInstance#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "373": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrowInstance#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%6#0"
      ]
    },
    "376": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "escrowInstance#0"
      ]
    },
    "377": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "escrowInstance#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "escrowInstance#0",
        "16"
      ]
    },
    "378": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "379": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": []
    },
    "382": {
      "retsub": true,
      "op": "retsub"
    },
    "383": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow._send",
      "params": {
        "receiver#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "_send",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "386": {
      "op": "itxn_begin"
    },
    "387": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "389": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "receiver#0 (copy)"
      ]
    },
    "391": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "393": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "395": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "397": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "1"
      ]
    },
    "398": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "400": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "402": {
      "op": "itxn_submit"
    },
    "403": {
      "retsub": true,
      "op": "retsub"
    },
    "404": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.makeHash",
      "params": {
        "secret#0": "bytes"
      },
      "block": "makeHash",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "407": {
      "op": "frame_dig -1",
      "defined_out": [
        "secret#0 (copy)"
      ],
      "stack_out": [
        "secret#0 (copy)"
      ]
    },
    "409": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "410": {
      "retsub": true,
      "op": "retsub"
    },
    "411": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "params": {},
      "block": "latestTimestamp",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "413": {
      "retsub": true,
      "op": "retsub"
    }
  }
}