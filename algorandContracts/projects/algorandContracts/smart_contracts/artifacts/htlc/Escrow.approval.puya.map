{
  "version": 3,
  "sources": [
    "/home/lukas/CodingProjects/PottiSwap/algorandContracts/projects/algorandContracts/smart_contracts/htlc/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BS;AAA4D;AAAnE;AAFF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAoGG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA3FH;;;AA2FG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAzDH;;;AAAA;AAyDG;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AApCH;;;AAAA;;;AAAA;AAoCG;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAZH;;;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAYE;;;AAG6B;;;AAAZ;AACkB;;AAAP;;AAAA;AAAZ;AACmB;;AAAA;;AAAvB;AACwB;;AAAA;;AAJR;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAOhB;;;;;;;;;;AAPgB;AAZrB;AAAA;AAAA;AAAA;AAsBL;AAvBmE;AAAA;AAAA;AAuBnE;AAAA;AAtBK;AAAA;AAAA;AAAA;AAwBL;AAAA;AAxBK;AAwBL;AAAA;AAxBK;AAAA;AAAA;AAAA;AA0BL;AAQF;;;AAEyB;;AAAA;AArC4C;AAAA;AAAA;AAqCb;AAAA;AAAA;AAEzB;AAAP;AAAO;AAAW;AAAjC;AAAP;AAEO;;AAAA;;;AAAyC;;AAAA;;;AAAzC;AAAP;AAEO;;;AAAmD;;AAAX;AAAW;AAAnD;AAAP;AAEwB;AAAxB;;AACA;AAAA;;AAAA;AAG0B;AAAA;;;AAA6B;AAAP;;AAAO;AAAvD;;;;AAOF;;;AAEyB;;AAAA;AA1D4C;AAAA;AAAA;AA0Db;AAAA;AAAA;AAEzB;AAAP;AAAO;AAAW;AAAjC;AAAP;AAEO;;;AAAmD;;AAAX;AAAW;AAAnD;AAAP;AAEwB;AAAxB;;AACA;AAAA;;AAAA;AAG0B;AAAA;;;AAA+B;AAAP;;AAAO;AAAzD;;;;AAMF;;;AACE;AAGgB;;;;;;;;;;AAHhB;;;;;AAAA;;AAeF;;;AAES;;AAAA;AAAP;AASc;;AAAd",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 120 8"
    },
    "7": {
      "op": "bytecblock \"escrowInstancesAmount\" 0x151f7c75 \"escrowInstances\" 0x0000000000000000"
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "66": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "defined_out": [
        "\"escrowInstancesAmount\""
      ],
      "stack_out": [
        "\"escrowInstancesAmount\""
      ]
    },
    "67": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"escrowInstancesAmount\"",
        "0"
      ],
      "stack_out": [
        "\"escrowInstancesAmount\"",
        "0"
      ]
    },
    "68": {
      "op": "app_global_put",
      "stack_out": []
    },
    "69": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "71": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "74": {
      "op": "pushbytess 0xdeb6f0e6 0xa7dba54a 0x772b39ba 0xdee13de1 0x64ccd930 // method \"create(uint64,byte[32],address,pay)uint64\", method \"withdraw(byte[32],uint64)void\", method \"cancel(uint64)void\", method \"makeHash(byte[32])byte[]\", method \"latestTimestamp()uint64\"",
      "defined_out": [
        "Method(cancel(uint64)void)",
        "Method(create(uint64,byte[32],address,pay)uint64)",
        "Method(latestTimestamp()uint64)",
        "Method(makeHash(byte[32])byte[])",
        "Method(withdraw(byte[32],uint64)void)"
      ],
      "stack_out": [
        "Method(create(uint64,byte[32],address,pay)uint64)",
        "Method(withdraw(byte[32],uint64)void)",
        "Method(cancel(uint64)void)",
        "Method(makeHash(byte[32])byte[])",
        "Method(latestTimestamp()uint64)"
      ]
    },
    "101": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(cancel(uint64)void)",
        "Method(create(uint64,byte[32],address,pay)uint64)",
        "Method(latestTimestamp()uint64)",
        "Method(makeHash(byte[32])byte[])",
        "Method(withdraw(byte[32],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(uint64,byte[32],address,pay)uint64)",
        "Method(withdraw(byte[32],uint64)void)",
        "Method(cancel(uint64)void)",
        "Method(makeHash(byte[32])byte[])",
        "Method(latestTimestamp()uint64)",
        "tmp%2#0"
      ]
    },
    "104": {
      "op": "match main_create_route@5 main_withdraw_route@6 main_cancel_route@7 main_makeHash_route@8 main_latestTimestamp_route@9",
      "stack_out": []
    },
    "116": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "block": "main_latestTimestamp_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "120": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "121": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "122": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "124": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "125": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "128": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "129": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "131": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "132": {
      "op": "log",
      "stack_out": []
    },
    "133": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "134": {
      "op": "return",
      "stack_out": []
    },
    "135": {
      "block": "main_makeHash_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "137": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "138": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "141": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "142": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "145": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.makeHash",
      "op": "callsub makeHash",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "148": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "149": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "150": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "151": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "154": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "155": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "156": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "158": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "159": {
      "op": "log",
      "stack_out": []
    },
    "160": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "return",
      "stack_out": []
    },
    "162": {
      "block": "main_cancel_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "164": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "165": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "166": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "168": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "169": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "172": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "173": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.cancel",
      "op": "callsub cancel",
      "stack_out": []
    },
    "176": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "177": {
      "op": "return",
      "stack_out": []
    },
    "178": {
      "block": "main_withdraw_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "180": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "181": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "182": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "184": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "185": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "188": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "191": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "tmp%14#0"
      ]
    },
    "192": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "195": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "196": {
      "op": "return",
      "stack_out": []
    },
    "197": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "199": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "200": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "201": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "203": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "204": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "207": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "208": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "211": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "214": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%8#0"
      ]
    },
    "216": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%8#0",
        "1"
      ]
    },
    "217": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "218": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "219": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "221": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "222": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "223": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "gtxn_idx%0#0"
      ]
    },
    "224": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.create",
      "op": "callsub create",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "227": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "228": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "231": {
      "op": "log",
      "stack_out": []
    },
    "232": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return",
      "stack_out": []
    },
    "234": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "236": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "239": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "241": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "242": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "243": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "244": {
      "op": "return",
      "stack_out": []
    },
    "245": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.create",
      "params": {
        "timelock#0": "uint64",
        "secretHash#0": "bytes",
        "taker#0": "bytes",
        "txnDeposit#0": "uint64"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "248": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "251": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "252": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "254": {
      "op": "frame_dig -4",
      "defined_out": [
        "timelock#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "timelock#0 (copy)"
      ]
    },
    "256": {
      "op": "+",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "to_encode%1#0"
      ]
    },
    "257": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "258": {
      "op": "frame_dig -1",
      "defined_out": [
        "txnDeposit#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "260": {
      "op": "gtxns Amount",
      "defined_out": [
        "to_encode%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "to_encode%2#0"
      ]
    },
    "262": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "263": {
      "op": "frame_dig -1",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "265": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%1#0"
      ]
    },
    "267": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "269": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%2#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "271": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "272": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "274": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "275": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0"
      ]
    },
    "276": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "277": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "taker#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "taker#0 (copy)"
      ]
    },
    "279": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "280": {
      "op": "frame_dig -3",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "secretHash#0 (copy)"
      ]
    },
    "282": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "283": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x0000000000000001"
      ]
    },
    "293": {
      "op": "concat",
      "defined_out": [
        "newEscrowInstance#0"
      ],
      "stack_out": [
        "newEscrowInstance#0"
      ]
    },
    "294": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "newEscrowInstance#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "0"
      ]
    },
    "295": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "defined_out": [
        "\"escrowInstancesAmount\"",
        "0",
        "newEscrowInstance#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "0",
        "\"escrowInstancesAmount\""
      ]
    },
    "296": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "newEscrowInstance#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "297": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newEscrowInstance#0",
        "maybe_value%0#0"
      ]
    },
    "298": {
      "op": "itob",
      "defined_out": [
        "newEscrowInstance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "tmp%2#0"
      ]
    },
    "299": {
      "op": "bytec_2 // \"escrowInstances\"",
      "defined_out": [
        "\"escrowInstances\"",
        "newEscrowInstance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "tmp%2#0",
        "\"escrowInstances\""
      ]
    },
    "300": {
      "op": "swap",
      "stack_out": [
        "newEscrowInstance#0",
        "\"escrowInstances\"",
        "tmp%2#0"
      ]
    },
    "301": {
      "op": "concat",
      "defined_out": [
        "newEscrowInstance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "newEscrowInstance#0",
        "tmp%3#0"
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "newEscrowInstance#0"
      ]
    },
    "303": {
      "op": "box_put",
      "stack_out": []
    },
    "304": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "305": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "stack_out": [
        "0",
        "\"escrowInstancesAmount\""
      ]
    },
    "306": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "307": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "308": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "309": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "310": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"escrowInstancesAmount\""
      ]
    },
    "311": {
      "op": "swap",
      "stack_out": [
        "\"escrowInstancesAmount\"",
        "new_state_value%0#0"
      ]
    },
    "312": {
      "op": "app_global_put",
      "stack_out": []
    },
    "313": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "314": {
      "op": "bytec_0 // \"escrowInstancesAmount\"",
      "stack_out": [
        "0",
        "\"escrowInstancesAmount\""
      ]
    },
    "315": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "316": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    },
    "318": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.withdraw",
      "params": {
        "secret#0": "bytes",
        "escrowId#0": "uint64"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "321": {
      "op": "frame_dig -1",
      "defined_out": [
        "escrowId#0 (copy)"
      ],
      "stack_out": [
        "escrowId#0 (copy)"
      ]
    },
    "323": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "324": {
      "op": "bytec_2 // \"escrowInstances\"",
      "defined_out": [
        "\"escrowInstances\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"escrowInstances\""
      ]
    },
    "325": {
      "op": "swap",
      "stack_out": [
        "\"escrowInstances\"",
        "tmp%0#0"
      ]
    },
    "326": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "327": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "328": {
      "op": "box_get",
      "defined_out": [
        "escrowInstance#0",
        "maybe_exists%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "maybe_exists%0#0"
      ]
    },
    "329": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "330": {
      "op": "dup",
      "defined_out": [
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "331": {
      "op": "intc_2 // 120",
      "defined_out": [
        "120",
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "120"
      ]
    },
    "332": {
      "op": "extract_uint64",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%3#0"
      ]
    },
    "333": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%3#0",
        "1"
      ]
    },
    "334": {
      "op": "==",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%4#0"
      ]
    },
    "335": {
      "error": "Escrow is not active",
      "op": "assert // Escrow is not active",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "336": {
      "op": "frame_dig -2",
      "defined_out": [
        "escrowInstance#0",
        "secret#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "secret#0 (copy)"
      ]
    },
    "338": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.makeHash",
      "op": "callsub makeHash",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%5#0"
      ]
    },
    "341": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%5#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "343": {
      "error": "Index access is out of bounds",
      "op": "extract 88 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "346": {
      "op": "==",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%7#0"
      ]
    },
    "347": {
      "error": "The password is not correct",
      "op": "assert // The password is not correct",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "348": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%8#0"
      ]
    },
    "351": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%8#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "353": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%8#0",
        "escrowInstance#0 (copy)",
        "8"
      ]
    },
    "354": {
      "op": "extract_uint64",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "355": {
      "op": "<",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%11#0"
      ]
    },
    "356": {
      "error": "Escrow can be redeemed with password up to the rescue time",
      "op": "assert // Escrow can be redeemed with password up to the rescue time",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "357": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "escrowInstance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "0x0000000000000000"
      ]
    },
    "358": {
      "op": "replace2 120",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "360": {
      "op": "swap",
      "stack_out": [
        "escrowInstance#0",
        "tmp%1#0"
      ]
    },
    "361": {
      "op": "dig 1",
      "stack_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "363": {
      "op": "box_put",
      "stack_out": [
        "escrowInstance#0"
      ]
    },
    "364": {
      "op": "dup",
      "stack_out": [
        "escrowInstance#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "365": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrowInstance#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%14#0"
      ]
    },
    "368": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "escrowInstance#0"
      ]
    },
    "369": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "escrowInstance#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "escrowInstance#0",
        "16"
      ]
    },
    "371": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "372": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": []
    },
    "375": {
      "retsub": true,
      "op": "retsub"
    },
    "376": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.cancel",
      "params": {
        "escrowId#0": "uint64"
      },
      "block": "cancel",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "379": {
      "op": "frame_dig -1",
      "defined_out": [
        "escrowId#0 (copy)"
      ],
      "stack_out": [
        "escrowId#0 (copy)"
      ]
    },
    "381": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "bytec_2 // \"escrowInstances\"",
      "defined_out": [
        "\"escrowInstances\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"escrowInstances\""
      ]
    },
    "383": {
      "op": "swap",
      "stack_out": [
        "\"escrowInstances\"",
        "tmp%0#0"
      ]
    },
    "384": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "385": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "386": {
      "op": "box_get",
      "defined_out": [
        "escrowInstance#0",
        "maybe_exists%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "maybe_exists%0#0"
      ]
    },
    "387": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "388": {
      "op": "dup",
      "defined_out": [
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "389": {
      "op": "intc_2 // 120",
      "defined_out": [
        "120",
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "120"
      ]
    },
    "390": {
      "op": "extract_uint64",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%3#0"
      ]
    },
    "391": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%3#0",
        "1"
      ]
    },
    "392": {
      "op": "==",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%4#0"
      ]
    },
    "393": {
      "error": "Escrow is not active",
      "op": "assert // Escrow is not active",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "394": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%5#0"
      ]
    },
    "397": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%5#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "399": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "escrowInstance#0",
        "escrowInstance#0 (copy)",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%5#0",
        "escrowInstance#0 (copy)",
        "8"
      ]
    },
    "400": {
      "op": "extract_uint64",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "401": {
      "op": ">",
      "defined_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "tmp%8#0"
      ]
    },
    "402": {
      "error": "The escrow cannot be canceled yet",
      "op": "assert // The escrow cannot be canceled yet",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "403": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "escrowInstance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0",
        "0x0000000000000000"
      ]
    },
    "404": {
      "op": "replace2 120",
      "stack_out": [
        "tmp%1#0",
        "escrowInstance#0"
      ]
    },
    "406": {
      "op": "swap",
      "stack_out": [
        "escrowInstance#0",
        "tmp%1#0"
      ]
    },
    "407": {
      "op": "dig 1",
      "stack_out": [
        "escrowInstance#0",
        "tmp%1#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "409": {
      "op": "box_put",
      "stack_out": [
        "escrowInstance#0"
      ]
    },
    "410": {
      "op": "dup",
      "stack_out": [
        "escrowInstance#0",
        "escrowInstance#0 (copy)"
      ]
    },
    "411": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrowInstance#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "escrowInstance#0",
        "tmp%11#0"
      ]
    },
    "414": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "escrowInstance#0"
      ]
    },
    "415": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "escrowInstance#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "escrowInstance#0",
        "16"
      ]
    },
    "417": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "418": {
      "callsub": "smart_contracts/htlc/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": []
    },
    "421": {
      "retsub": true,
      "op": "retsub"
    },
    "422": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow._send",
      "params": {
        "receiver#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "_send",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "425": {
      "op": "itxn_begin"
    },
    "426": {
      "op": "global MinTxnFee",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "428": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "receiver#0 (copy)"
      ]
    },
    "430": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "432": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "434": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "436": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0",
        "1"
      ]
    },
    "437": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_Fee_idx_0#0"
      ]
    },
    "439": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "441": {
      "op": "itxn_submit"
    },
    "442": {
      "retsub": true,
      "op": "retsub"
    },
    "443": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.makeHash",
      "params": {
        "secret#0": "bytes"
      },
      "block": "makeHash",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "446": {
      "op": "frame_dig -1",
      "defined_out": [
        "secret#0 (copy)"
      ],
      "stack_out": [
        "secret#0 (copy)"
      ]
    },
    "448": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "449": {
      "retsub": true,
      "op": "retsub"
    },
    "450": {
      "subroutine": "smart_contracts/htlc/contract.algo.ts::Escrow.latestTimestamp",
      "params": {},
      "block": "latestTimestamp",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "retsub": true,
      "op": "retsub"
    }
  }
}