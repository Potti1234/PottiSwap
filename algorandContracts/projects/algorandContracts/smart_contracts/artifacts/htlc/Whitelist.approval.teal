#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "factoryAppId" "whitelist"
    // smart_contracts/htlc/whitelist.algo.ts:3
    // export class Whitelist extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x36630a35 0x77f3a0b6 0x2888339d 0xff6bebe3 // method "createWhitelist(uint64)void", method "addToWhitelist(uint64)void", method "removeFromWhitelist(uint64)void", method "isWhitelisted(uint64)bool"
    txna ApplicationArgs 0
    match main_createWhitelist_route@3 main_addToWhitelist_route@4 main_removeFromWhitelist_route@5 main_isWhitelisted_route@6

main_after_if_else@13:
    // smart_contracts/htlc/whitelist.algo.ts:3
    // export class Whitelist extends Contract {
    intc_1 // 0
    return

main_isWhitelisted_route@6:
    // smart_contracts/htlc/whitelist.algo.ts:25
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/whitelist.algo.ts:3
    // export class Whitelist extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/htlc/whitelist.algo.ts:25
    // @abimethod({ readonly: true })
    callsub isWhitelisted
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_removeFromWhitelist_route@5:
    // smart_contracts/htlc/whitelist.algo.ts:19
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/whitelist.algo.ts:3
    // export class Whitelist extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/htlc/whitelist.algo.ts:19
    // @abimethod()
    callsub removeFromWhitelist
    intc_0 // 1
    return

main_addToWhitelist_route@4:
    // smart_contracts/htlc/whitelist.algo.ts:13
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/whitelist.algo.ts:3
    // export class Whitelist extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/htlc/whitelist.algo.ts:13
    // @abimethod()
    callsub addToWhitelist
    intc_0 // 1
    return

main_createWhitelist_route@3:
    // smart_contracts/htlc/whitelist.algo.ts:8
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/htlc/whitelist.algo.ts:3
    // export class Whitelist extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/htlc/whitelist.algo.ts:8
    // @abimethod()
    callsub createWhitelist
    intc_0 // 1
    return

main_bare_routing@9:
    // smart_contracts/htlc/whitelist.algo.ts:3
    // export class Whitelist extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/htlc/whitelist.algo.ts::Whitelist.createWhitelist(factoryAppId: uint64) -> void:
createWhitelist:
    // smart_contracts/htlc/whitelist.algo.ts:8-9
    // @abimethod()
    // public createWhitelist(factoryAppId: uint64): void {
    proto 1 0
    // smart_contracts/htlc/whitelist.algo.ts:6
    // factoryAppId = GlobalState<uint64>();
    bytec_0 // "factoryAppId"
    // smart_contracts/htlc/whitelist.algo.ts:10
    // this.factoryAppId.value = factoryAppId;
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/htlc/whitelist.algo.ts::Whitelist.addToWhitelist(appId: uint64) -> void:
addToWhitelist:
    // smart_contracts/htlc/whitelist.algo.ts:13-14
    // @abimethod()
    // public addToWhitelist(appId: uint64): void {
    proto 1 0
    // smart_contracts/htlc/whitelist.algo.ts:6
    // factoryAppId = GlobalState<uint64>();
    intc_1 // 0
    bytec_0 // "factoryAppId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/whitelist.algo.ts:15
    // assert(this.factoryAppId.value === Txn.applicationId.id, "Not authorized to add to whitelist");
    txn ApplicationID
    ==
    assert // Not authorized to add to whitelist
    // smart_contracts/htlc/whitelist.algo.ts:16
    // this.whitelist(appId).value = 1; // 1 means whitelisted
    frame_dig -1
    itob
    // smart_contracts/htlc/whitelist.algo.ts:5
    // whitelist = BoxMap<uint64, uint64>({ keyPrefix: "whitelist" });
    bytec_1 // "whitelist"
    swap
    concat
    // smart_contracts/htlc/whitelist.algo.ts:16
    // this.whitelist(appId).value = 1; // 1 means whitelisted
    intc_0 // 1
    itob
    box_put
    retsub


// smart_contracts/htlc/whitelist.algo.ts::Whitelist.removeFromWhitelist(appId: uint64) -> void:
removeFromWhitelist:
    // smart_contracts/htlc/whitelist.algo.ts:19-20
    // @abimethod()
    // public removeFromWhitelist(appId: uint64): void {
    proto 1 0
    // smart_contracts/htlc/whitelist.algo.ts:6
    // factoryAppId = GlobalState<uint64>();
    intc_1 // 0
    bytec_0 // "factoryAppId"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/htlc/whitelist.algo.ts:21
    // assert(this.factoryAppId.value === Txn.applicationId.id, "Not authorized to remove from whitelist");
    txn ApplicationID
    ==
    assert // Not authorized to remove from whitelist
    // smart_contracts/htlc/whitelist.algo.ts:22
    // this.whitelist(appId).delete();
    frame_dig -1
    itob
    // smart_contracts/htlc/whitelist.algo.ts:5
    // whitelist = BoxMap<uint64, uint64>({ keyPrefix: "whitelist" });
    bytec_1 // "whitelist"
    swap
    concat
    // smart_contracts/htlc/whitelist.algo.ts:22
    // this.whitelist(appId).delete();
    box_del
    pop
    retsub


// smart_contracts/htlc/whitelist.algo.ts::Whitelist.isWhitelisted(appId: uint64) -> uint64:
isWhitelisted:
    // smart_contracts/htlc/whitelist.algo.ts:25-26
    // @abimethod({ readonly: true })
    // public isWhitelisted(appId: uint64): boolean {
    proto 1 1
    // smart_contracts/htlc/whitelist.algo.ts:27
    // return this.whitelist(appId).exists;
    frame_dig -1
    itob
    // smart_contracts/htlc/whitelist.algo.ts:5
    // whitelist = BoxMap<uint64, uint64>({ keyPrefix: "whitelist" });
    bytec_1 // "whitelist"
    swap
    concat
    // smart_contracts/htlc/whitelist.algo.ts:27
    // return this.whitelist(appId).exists;
    box_len
    bury 1
    retsub
